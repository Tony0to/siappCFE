{
    "module_title": "Módulo 2: Lógica de Programación",
    "welcome": {
        "title": "¡Bienvenido al Módulo 2!",
        "description": "En este segundo módulo, nos adentraremos en los principios esenciales de la lógica de programación, una habilidad clave para desarrollar soluciones eficientes. Exploraremos desde las estructuras fundamentales, como secuencias, condicionales y bucles, hasta el manejo de estructuras de datos esenciales."
    },
    "syllabus": {
        "title": "Temario completo:",
        "sections": [
            {
                "title": "I. Estructuras básicas de la lógica de programación",
                "items": [
                    "Diagramas de flujo aplicados a la lógica de programación",
                    "Operadores lógicos y relacionales",
                    "Evaluación de condiciones y expresiones booleanas"
                ]
            },
            {
                "title": "II. Estructuras de datos",
                "items": [
                    "Variables y tipos de datos",
                    "Arreglos y matrices",
                    "Listas y estructuras básicas"
                ]
            },
            {
                "title": "III. Estructuras de control",
                "items": [
                    "Secuenciales",
                    "Condicionales (if, else, switch)",
                    "Bucles (while, for, do-while)"
                ]
            },
            {
                "title": "IV. Resolución de problemas aplicando el razonamiento lógico",
                "items": [
                    "Planteamiento de problemas",
                    "Algoritmos paso a paso",
                    "Ejercicios prácticos y análisis de soluciones"
                ]
            }
        ]
    },
    "learning_points": {
        "title": "En este módulo aprenderás:",
        "points": [
            {
                "icon": "account_tree",
                "title": "Estructuras fundamentales",
                "description": "Dominarás las bases de la programación como secuencias, condicionales y bucles para controlar el flujo de ejecución."
            },
            {
                "icon": "list_alt",
                "title": "Manejo de datos",
                "description": "Aprenderás a trabajar con variables, arreglos, matrices y otras estructuras para organizar información."
            },
            {
                "icon": "psychology",
                "title": "Pensamiento algorítmico",
                "description": "Desarrollarás la capacidad de descomponer problemas en pasos lógicos para crear soluciones eficientes."
            },
            {
                "icon": "code",
                "title": "Solución de problemas",
                "description": "Practicarás con ejercicios reales que fortalecerán tu capacidad de análisis y razonamiento lógico."
            }
        ]
    },
    "motivation": {
        "text": "La programación no se trata solo de escribir código, sino de resolver problemas. Cada línea que escribas es un paso hacia el dominio del pensamiento computacional.",
        "icon": "emoji_objects"
    },
    "button_text": "Comenzar Módulo",
    "content": {
        "section_1": {
            "title": "I. Estructuras básicas de la lógica de programación",
            "subsections": [
                {
                    "title": "Introducción a las estructuras de control",
                    "content": "Comprender cómo se controla el flujo de ejecución en un programa es clave para desarrollar soluciones lógicas y eficientes. Las estructuras de control permiten establecer decisiones, repetir instrucciones y representar visualmente el comportamiento de un algoritmo. En este subtema, profundizaremos en el uso de diagramas de flujo como herramienta para representar la lógica de forma clara, aprenderemos a utilizar operadores lógicos y relacionales para construir condiciones precisas, y exploraremos cómo evaluar expresiones booleanas para tomar decisiones dentro del programa. ¡Prepárate para dominar las herramientas que les dan vida a tus decisiones dentro del código!"
                },
                {
                    "title": "Diagramas de flujo aplicados",
                    "content": "Los diagramas de flujo son herramientas visuales que representan la lógica de un programa. Permiten visualizar claramente el flujo de ejecución, decisiones y ciclos en un algoritmo. A continuación, se presentan ejemplos prácticos que muestran cómo se utilizan para representar estructuras de control como secuencias, decisiones y ciclos.",
                    "examples": [
                        {
                            "title": "Ejemplo: Secuencia simple",
                            "content": "Problema: Calcular el área de un rectángulo.\n\nLógica: Leer base y altura, multiplicarlas, mostrar el resultado.",
                            "flowchart": "[Inicio]\n↓\n[Leer base]\n↓\n[Leer altura]\n↓\n[Área = base * altura]\n↓\n[Mostrar área]\n↓\n[Fin]"
                        },
                        {
                            "title": "Ejemplo: Condicional",
                            "content": "Problema: Determinar si un número es par o impar.\n\nLógica: Usar el operador módulo (%) para verificar si el residuo es 0.\n\nSe lee un número. Si el número dividido entre 2 da un residuo de 0, se muestra 'Es par'. En caso contrario, se muestra 'Es impar'.",
                            "flowchart": "[Inicio]\n↓\n[Leer número]\n↓\n¿número % 2 == 0? → No\n↓                       ↓\n[Mostrar “Par”]    [Mostrar “Impar”]\n↓                       ↓\n[Fin]",
                            "question": {
                                "text": "¿Cuál de los siguientes números mostrará 'Es impar'?",
                                "options": ["8", "12", "0", "15"],
                                "correct": "15"
                            },
                            "level": "Intermedio bajo",
                            "note": "Este ejercicio requiere comprender el operador módulo (%) para tomar decisiones basadas en el residuo, un paso hacia problemas más complejos."
                        },
                        {
                            "title": "Ejemplo: Bucle (ciclo)",
                            "content": "Problema: Mostrar los números del 1 al 5.\n\nLógica: Inicializar una variable i con el valor 1. Mientras i sea menor o igual a 5, mostrar i e incrementarlo en 1.",
                            "flowchart": "[Inicio]\n↓\n[i = 1]\n↓\n¿i <= 5? → No\n↓                 ↓\n[Mostrar i]    [Fin]\n[i = i +1]\n↓\n(Volver a condición)",
                            "note": "Este ciclo con condición fija introduce la idea de iteración de forma sencilla, ideal para principiantes."
                        },
                        {
                            "title": "Ejemplo: Condicional múltiple",
                            "content": "Problema: Determinar si un número es positivo, negativo o cero.\n\nLógica: Leer el número. Si es mayor que 0, es positivo. Si es menor que 0, es negativo. Si no es ni mayor ni menor, es cero. Mostrar el resultado.",
                            "flowchart": "[Inicio]\n↓\n[Leer número]\n↓\n¿Número > 0? → No\n↓                    ↓\n[Mostrar “Positivo”]  ¿Número < 0? → No\n↓                    ↓            ↓\n[Fin]                [Mostrar “Negativo”] [Mostrar “Cero”]\n↓                    ↓            ↓\n[Fin]                [Fin]        [Fin]"
                        }
                    ]
                },
                {
                    "title": "Operadores lógicos y relacionales",
                    "content": "Los operadores permiten realizar comparaciones y combinar condiciones en tus programas. Son esenciales para la toma de decisiones.",
                    "examples": [
                        {
                            "title": "Operadores relacionales",
                            "content": ">, <, >=, <=, ==, != para comparar valores"
                        },
                        {
                            "title": "Operadores lógicos",
                            "content": "AND, OR, NOT para combinar condiciones"
                        }
                    ]
                }
            ]
        },
        "section_2": {
            "title": "II. Estructuras de datos",
            "subsections": [
                {
                    "title": "Variables y tipos de datos",
                    "content": "Las variables son contenedores para almacenar información. Los tipos de datos definen qué clase de valores pueden contener.",
                    "examples": [
                        {
                            "title": "Tipos primitivos",
                            "content": "int, float, char, bool para valores básicos"
                        },
                        {
                            "title": "Estructuras complejas",
                            "content": "String, arrays, listas para agrupar datos"
                        }
                    ]
                },
                {
                    "title": "Arreglos y matrices",
                    "content": "Estructuras para almacenar colecciones de datos del mismo tipo. Los arreglos son unidimensionales, las matrices son bidimensionales.",
                    "examples": [
                        {
                            "title": "Arreglo unidimensional",
                            "content": "int[] numeros = {1, 2, 3, 4, 5};"
                        },
                        {
                            "title": "Matriz bidimensional",
                            "content": "int[][] matriz = {{1,2,3}, {4,5,6}};"
                        }
                    ]
                }
            ]
        },
        "section_3": {
            "title": "III. Estructuras de control",
            "subsections": [
                {
                    "title": "Secuenciales",
                    "content": "Ejecución lineal de instrucciones una después de otra, en el orden en que están escritas.",
                    "examples": [
                        {
                            "title": "Ejemplo básico",
                            "content": "Leer entrada → Procesar → Mostrar resultado"
                        }
                    ]
                },
                {
                    "title": "Condicionales",
                    "content": "Permiten tomar decisiones en el código basadas en condiciones.",
                    "examples": [
                        {
                            "title": "if-else",
                            "content": "if (edad >= 18) { ... } else { ... }"
                        },
                        {
                            "title": "switch",
                            "content": "switch(dia) { case 1: ... break; default: ... }"
                        }
                    ]
                },
                {
                    "title": "Bucles",
                    "content": "Estructuras para repetir bloques de código mientras se cumpla una condición.",
                    "examples": [
                        {
                            "title": "for",
                            "content": "for(int i=0; i<10; i++) { ... }"
                        },
                        {
                            "title": "while",
                            "content": "while(condicion) { ... }"
                        }
                    ]
                }
            ]
        },
        "section_4": {
            "title": "IV. Resolución de problemas",
            "subsections": [
                {
                    "title": "Planteamiento de problemas",
                    "content": "El primer paso es entender claramente el problema identificando entradas, procesos y salidas esperadas.",
                    "examples": [
                        {
                            "title": "Ejemplo cotidiano",
                            "content": "Organizar una salida al cine: entradas (días disponibles, personas), proceso (comparar horarios), salida (boletos comprados)."
                        }
                    ]
                },
                {
                    "title": "Algoritmos paso a paso",
                    "content": "Descomposición del problema en instrucciones claras y ordenadas.",
                    "examples": [
                        {
                            "title": "Algoritmo para área de triángulo",
                            "content": "1. Leer base\n2. Leer altura\n3. Calcular área = (base*altura)/2\n4. Mostrar resultado"
                        }
                    ]
                }
            ]
        }
    },
    "activities": [
        {
            "subtopic": "Estructuras de control",
            "objective": "Practicar el uso de condicionales y bucles para controlar el flujo de un programa.",
            "theory": {
                "questions": [
                    {
                        "question": "¿Qué estructura de control usarías para ejecutar un bloque de código exactamente 10 veces?",
                        "options": [
                            "Solo condicional if",
                            "Bucle while",
                            "Bucle for",
                            "Condicional switch"
                        ],
                        "correctAnswer": 2
                    }
                ]
            },
            "practice": {
                "question": "Escribe un algoritmo que imprima los números pares del 2 al 20",
                "expected_output": "2, 4, 6, 8, 10, 12, 14, 16, 18, 20"
            }
        },
        {
            "subtopic": "Estructuras de datos",
            "objective": "Practicar el manejo de arreglos y listas para almacenar y procesar datos.",
            "theory": {
                "questions": [
                    {
                        "question": "¿Cuál es la principal diferencia entre un arreglo y una lista?",
                        "options": [
                            "Los arreglos pueden cambiar de tamaño",
                            "Las listas pueden cambiar de tamaño",
                            "Solo los arreglos pueden tener números",
                            "Las listas no pueden ser vacías"
                        ],
                        "correctAnswer": 1
                    }
                ]
            },
            "practice": {
                "question": "Crea un arreglo con 5 números y calcula su promedio",
                "steps": [
                    "Crear arreglo con valores [8, 10, 7, 9, 6]",
                    "Sumar todos los elementos",
                    "Dividir la suma entre la cantidad de elementos (5)",
                    "Mostrar el resultado"
                ]
            }
        }
    ],
    "activity_descriptions": [
        "Ejercicios con diagramas de flujo",
        "Práctica con operadores lógicos",
        "Implementación de estructuras de control",
        "Manejo de estructuras de datos",
        "Resolución de problemas algorítmicos"
    ],
    "activity_completion_message": "Progreso guardado exitosamente",
    "login_required_message": "Inicia sesión para guardar tu progreso",
    "user_not_found_message": "Usuario no registrado en el sistema"
}