{
    "module_title": "Módulo 2: Lógica de Programación",
    "welcome": {
        "title": "¡Bienvenido al Módulo 2!",
        "subtitle": "Prepárate para programar",
        "intro": "En este segundo módulo, nos adentraremos en los principios esenciales de la lógica de programación, una habilidad clave para desarrollar soluciones eficientes. Exploraremos desde las estructuras fundamentales, como secuencias, condicionales y bucles, hasta el manejo de estructuras de datos esenciales.",
        "details": "A lo largo de este recorrido, aprenderás a estructurar algoritmos de manera lógica, comprenderás el funcionamiento de los operadores lógicos y relacionales, y aplicarás diagramas de flujo para visualizar el comportamiento de tus programas. Al finalizar este módulo, contarás con una base sólida para construir programas organizados, optimizados y funcionales, lo que te permitirá enfrentar desafíos más complejos con mayor confianza."
    },
    "syllabus": {
        "title": "Temario completo:",
        "sections": [
            {
                "title": "I. Estructuras básicas de la lógica de programación",
                "items": [
                    "Diagramas de flujo aplicados a la lógica de programación",
                    "Operadores lógicos y relacionales",
                    "Evaluación de condiciones y expresiones booleanas"
                ]
            },
            {
                "title": "II. Estructuras de control con datos primitivos",
                "items": [
                    "Secuenciales",
                    "Condicionales (if, else, switch)",
                    "Bucles (while, for, do-while)"
                ]
            },
            {
                "title": "III. Estructuras de datos y de control",
                "items": [
                    "Arreglos y matrices",
                    "Listas y estructuras básicas"
                ]
            },
            {
                "title": "IV. Resolución de problemas aplicando el razonamiento lógico",
                "items": [
                    "Planteamiento de problemas",
                    "Algoritmos paso a paso",
                    "Ejercicios prácticos y análisis de soluciones"
                ]
            }
        ]
    },
    "learning_points": {
        "title": "En este módulo aprenderás:",
        "points": [
            {
                "icon": "account_tree",
                "title": "Lógica fundamental",
                "description": "Comprenderás cómo usar diagramas de flujo y operadores para estructurar la lógica de un programa."
            },
            {
                "icon": "code",
                "title": "Control de flujo",
                "description": "Dominarás estructuras secuenciales, condicionales y bucles para manejar datos primitivos."
            },
            {
                "icon": "list_alt",
                "title": "Manejo de datos",
                "description": "Aprenderás a organizar y procesar información con arreglos, matrices y listas."
            },
            {
                "icon": "psychology",
                "title": "Resolución de problemas",
                "description": "Desarrollarás habilidades para plantear y resolver problemas usando algoritmos lógicos."
            }
        ]
    },
    "motivation": {
        "text": "¡La lógica de programación es la clave para transformar ideas en soluciones reales! Cada paso que des te acerca a dominar el arte de programar.",
        "icon": "emoji_objects"
    },
    "button_text": "Comenzar Módulo",
    "content": {
        "section_1": {
            "title": "I. Estructuras básicas de la lógica de programación",
            "subsections": [
                {
                    "title": "Diagramas de flujo aplicados",
                    "content": "Los diagramas de flujo son herramientas visuales que representan la lógica de un programa, permitiendo visualizar secuencias, decisiones y ciclos.",
                    "examples": [
                        {
                            "title": "Ejemplo: Secuencia simple",
                            "content": "Problema: Calcular el área de un rectángulo.\n\nLógica: Leer base y altura, multiplicarlas, mostrar el resultado.",
                            "flowchart": "[Inicio]\n↓\n[Leer base]\n↓\n[Leer altura]\n↓\n[Área = base * altura]\n↓\n[Mostrar área]\n↓\n[Fin]"
                        }
                    ]
                },
                {
                    "title": "Operadores lógicos y relacionales",
                    "content": "Los operadores permiten comparar valores y combinar condiciones para tomar decisiones en el código.",
                    "examples": [
                        {
                            "title": "Operadores relacionales",
                            "content": ">, <, >=, <=, ==, != para comparar valores"
                        },
                        {
                            "title": "Operadores lógicos",
                            "content": "AND, OR, NOT para combinar condiciones"
                        }
                    ]
                },
                {
                    "title": "Evaluación de condiciones",
                    "content": "Las expresiones booleanas determinan si una condición es verdadera o falsa, guiando el flujo del programa.",
                    "examples": [
                        {
                            "title": "Condicional simple",
                            "content": "Si un número es mayor a 0, mostrar 'Positivo'."
                        }
                    ]
                }
            ]
        },
        "section_2": {
            "title": "II. Estructuras de control con datos primitivos",
            "subsections": [
                {
                    "title": "Secuenciales",
                    "content": "Ejecución lineal de instrucciones en orden, usando datos primitivos como enteros o flotantes.",
                    "examples": [
                        {
                            "title": "Ejemplo básico",
                            "content": "Leer dos números, sumarlos, mostrar resultado."
                        }
                    ]
                },
                {
                    "title": "Condicionales",
                    "content": "Permiten tomar decisiones basadas en condiciones, usando if, else o switch.",
                    "examples": [
                        {
                            "title": "if-else",
                            "content": "if (edad >= 18) { mayor de edad } else { menor de edad }"
                        }
                    ]
                },
                {
                    "title": "Bucles",
                    "content": "Repiten instrucciones mientras una condición sea verdadera, usando while, for o do-while.",
                    "examples": [
                        {
                            "title": "for",
                            "content": "for(int i=1; i<=5; i++) { mostrar i }"
                        }
                    ]
                }
            ]
        },
        "section_3": {
            "title": "III. Estructuras de datos y de control",
            "subsections": [
                {
                    "title": "Arreglos y matrices",
                    "content": "Estructuras para almacenar colecciones de datos, unidimensionales (arreglos) o bidimensionales (matrices).",
                    "examples": [
                        {
                            "title": "Arreglo",
                            "content": "int[] numeros = {1, 2, 3, 4, 5};"
                        }
                    ]
                },
                {
                    "title": "Listas y estructuras básicas",
                    "content": "Estructuras dinámicas para almacenar datos que pueden crecer o reducirse.",
                    "examples": [
                        {
                            "title": "Lista",
                            "content": "List<String> nombres = ['Ana', 'Bob', 'Cris'];"
                        }
                    ]
                }
            ]
        },
        "section_4": {
            "title": "IV. Resolución de problemas aplicando el razonamiento lógico",
            "subsections": [
                {
                    "title": "Planteamiento de problemas",
                    "content": "Identificar entradas, procesos y salidas para estructurar soluciones claras.",
                    "examples": [
                        {
                            "title": "Ejemplo",
                            "content": "Calcular promedio de notas: leer notas, sumar, dividir, mostrar."
                        }
                    ]
                },
                {
                    "title": "Algoritmos paso a paso",
                    "content": "Descomponer problemas en pasos lógicos y ordenados.",
                    "examples": [
                        {
                            "title": "Área de triángulo",
                            "content": "1. Leer base\n2. Leer altura\n3. Área = (base*altura)/2\n4. Mostrar área"
                        }
                    ]
                },
                {
                    "title": "Ejercicios prácticos",
                    "content": "Resolver problemas reales para reforzar el razonamiento lógico.",
                    "examples": [
                        {
                            "title": "Números pares",
                            "content": "Mostrar números pares del 1 al 10."
                        }
                    ]
                }
            ]
        }
    },
    "activities": [
        {
            "subtopic": "Estructuras de control con datos primitivos",
            "objective": "Practicar el uso de condicionales y bucles con datos primitivos.",
            "theory": {
                "questions": [
                    {
                        "question": "¿Qué bucle usarías para repetir un bloque de código 5 veces?",
                        "options": [
                            "if",
                            "while",
                            "for",
                            "switch"
                        ],
                        "correctAnswer": 2
                    }
                ]
            },
            "practice": {
                "question": "Escribe un algoritmo que muestre los números del 1 al 5",
                "expected_output": "1, 2, 3, 4, 5"
            }
        },
        {
            "subtopic": "Estructuras de datos",
            "objective": "Practicar el manejo de arreglos y listas.",
            "theory": {
                "questions": [
                    {
                        "question": "¿Qué estructura permite almacenar múltiples valores en una sola variable?",
                        "options": [
                            "Variable simple",
                            "Arreglo",
                            "Condicional",
                            "Bucle"
                        ],
                        "correctAnswer": 1
                    }
                ]
            },
            "practice": {
                "question": "Crea un arreglo con 3 nombres y muestra el primero",
                "expected_output": "Nombre: Ana"
            }
        }
    ],
    "activity_descriptions": [
        "Práctica con diagramas de flujo",
        "Ejercicios con operadores lógicos",
        "Uso de estructuras de control",
        "Manejo de arreglos y listas",
        "Resolución de problemas lógicos"
    ],
    "activity_completion_message": "Progreso guardado exitosamente",
    "login_required_message": "Inicia sesión para guardar tu progreso",
    "user_not_found_message": "Usuario no registrado en el sistema"
}