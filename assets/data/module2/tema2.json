{
  "sectionTitle": "II. Estructuras de control con datos primitivos",
  "sectionImage": "https://assets2-programarya-com.juandmegon.com/img/Cursos/Fundamentacion/Estructuras-de-Control/Estructuras-de-Control-header.png",
  "welcomeText": "Las estructuras de control son fundamentales para tomar decisiones y repetir acciones dentro de un programa. Cuando las combinamos con datos primitivos, logramos que nuestros algoritmos sean dinámicos, adaptables y capaces de responder a distintas situaciones.",
  "introText1": "A través de estas herramientas, podrás crear algoritmos que reaccionen ante distintos escenarios, realicen comparaciones y ejecuten instrucciones específicas según los datos de entrada. Dominar las estructuras de control con datos primitivos te permitirá escribir programas más inteligentes y eficientes.",
  "introText2": "¡Prepárate para desarrollar lógica más precisa y tomar el control de tus decisiones en código!",
  "video": {
    "title": "Video Explicativo",
    "description": "Aprende más sobre estructuras de control con este video tutorial.",
    "id": "walAu_skXHA"
  },
  "subsections": [
    {
      "title": "Secuenciales",
      "notes": [
        {
          "title": "¿Qué son las estructuras de control?",
          "content": "Las estructuras de control son un conjunto de reglas que hacen posible la gestión del flujo de ejecución de los programas, esto lo logran determinando el orden en que las instrucciones se ejecutan.\n\nLas estructuras de control se dividen en tres categorías: secuenciales, condicionales e iterativas. Veamos en qué consiste cada una.",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "content": "“Las estructuras de control permiten que el código tome decisiones, repita acciones o bien siga su flujo de ejecución secuencial”.",
              "type": "highlight",
              "color": "#1E40AF",
              "opacity": 0.3
            }
          ]
        },
        {
          "title": "Características clave de las estructuras",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "title": "Orden lógico",
              "content": "Garantiza que las instrucciones se ejecuten de forma consecutiva y en el orden correcto, asegurando el procesamiento adecuado de los datos y operaciones.",
              "type": "highlight",
              "color": "#10B981",
              "opacity": 0.3
            },
            {
              "title": "Flujo predecible",
              "content": "Asegura que las instrucciones sigan un camino lineal y que el programa produzca los mismos resultados con los mismos datos de entrada, evitando comportamientos impredecibles.",
              "type": "highlight",
              "color": "#3E92CC",
              "opacity": 0.3
            }
          ]
        },
        {
          "content": "Las estructuras de control secuenciales son las más básicas. En este caso, las instrucciones se ejecutan una tras otra en el mismo orden en que están escritas.\n\nBasa su funcionamiento en tener acciones o instrucciones que sigan a otras de forma secuencial, se ejecutan en un orden específico, de arriba a abajo, una tras otra, sin bifurcaciones ni saltos, por lo que es unidireccional.",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "content": "“Se refieren a la ejecución ordenada y secuencial de instrucciones, una tras otra, en el mismo orden en que fueron escritas”.",
              "type": "highlight",
              "color": "#1E40AF",
              "opacity": 0.3
            }
          ]
        },
        {
          "content": "Al seguir un flujo de ejecución estructurado y predecible, se pueden evitar errores comunes, mejorar la legibilidad del código y asegurar que el programa funcione de manera confiable.",
          "color": "#1E40AF",
          "opacity": 0.3
        }
      ],
      "examples": [
        {
          "title": "Ejemplo: Algoritmo para calcular el área de un triángulo",
          "problem": "Este algoritmo utiliza una estructura secuencial, ya que las instrucciones se ejecutan una tras otra, sin tomar decisiones ni repetir pasos. Utilizaremos datos primitivos como números decimales (float) y operadores matemáticos para calcular el área.",
          "diagram": "assets/module2photos/diag8.png",
          "explanation": "Este ejemplo muestra cómo se pueden encadenar instrucciones secuenciales de entrada, proceso y salida utilizando operadores aritméticos y datos primitivos como float o int."
        }
      ]
    },
    {
      "title": "Condicionales (if, else, switch)",
      "notes": [
        {
          "content": "Son otra de las estructuras básicas en la programación, permiten que el programa vaya tomando decisiones con base en ciertas condiciones.\n\nExisten varios tipos de estructuras condicionales, como los if o switch, y cada una de ellas se utiliza para ejecutar diferentes bloques de código, esto dependiendo de si una condición es verdadera o falsa.",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "content": "“Las condicionales son estructuras fundamentales en la programación que permiten ejecutar instrucciones dependiendo de si una condición se cumple o no”.",
              "type": "highlight",
              "color": "#1E40AF",
              "opacity": 0.3
            }
          ]
        },
        {
          "title": "Condicional if",
          "content": "Este condicional tiene dos casos particulares. El primero es cuando se emplea simplemente la condición if, donde se busca comprobar una relación y, si se cumple, ejecutar un bloque de código determinado.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "Este tipo de condicional se usa cuando solo nos interesa realizar una acción si se cumple una condición, sin necesidad de manejar el caso contrario.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "title": "Condicional if-else",
          "content": "Es el segundo caso de un if, este se da cuando se emplea la estructura if-else. En este caso, se evalúa una condición y, si es verdadera, se ejecuta un bloque de código; si es falsa, se ejecuta otro bloque alternativo.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "Este tipo de estructura es útil cuando siempre se desea ejecutar una acción, ya sea si se cumple o no una condición.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "title": "Condicional if-else anidados",
          "content": "También se pueden utilizar de forma anidada, es decir, un if dentro de otro. En algunos casos, se pueden anidar múltiples if-else para evaluar más de dos condiciones, ya que nos permiten manejar varios casos y tomar decisiones más complejas.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "Este tipo de estructura permite realizar múltiples evaluaciones secuenciales dentro de una sola condición principal, útil para clasificadores más complejos.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "El condicional if-else es fundamental en la programación porque permite la toma de decisiones dentro de un programa. Su correcta implementación es clave para el flujo lógico del software, permitiendo ejecutar diferentes bloques de código según las condiciones evaluadas.",
          "type": "highlight",
          "color": "#10B981",
          "opacity": 0.3
        },
        {
          "title": "Condicional switch",
          "content": "El condicional switch es una estructura de control utilizada cuando una variable puede tomar distintos valores y, según cada valor, se ejecuta una acción específica. A diferencia del if-else, que evalúa condiciones lógicas, el switch compara el valor de una variable con diferentes casos predefinidos.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "Esta estructura es ideal cuando necesitas tomar decisiones basadas en un solo valor con múltiples opciones conocidas y limitadas.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "title": "Condicional switch sin break",
          "content": "Es la segunda versión del condicional switch, en este caso no se utiliza el break. Si no se usa break, se ejecutarán todos los casos siguientes hasta encontrar uno que sí lo tenga. Esto puede ser útil en ciertos escenarios.\n\nEl siguiente ejemplo, toma una variable llamada letra y la evalúa para determinar si un carácter almacenado en esta variable es una vocal o no.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "Este tipo de uso del switch puede be útil en ciertos casos como acumulaciones, cadenas de acciones o efectos secuenciales, pero debe usarse con precaución para evitar errores lógicos.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "Este condicional puede sustituir al condicional if, solo en casos donde sea necesario. Esto no quiere decir que siempre es mejor aplicar un condicional switch, al contrario, depende de la situación y el problema.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "title": "¿Cuándo usar switch en lugar de if-else?",
          "content": "Cuando se tiene una variable con múltiples valores predefinidos.\n\nCuando las comparaciones son directas y no dependen de expresiones complejas.\n\nCuando se quiere hacer el código más claro y organizado.\n\nNo es recomendable cuando se necesitan evaluar rangos de valores (<, >, <=, >=) o condiciones compuestas (&&, ||). En estos casos, es mejor usar if-else.\n\nEl condicional switch es una herramienta útil para estructurar decisiones múltiples de forma clara y eficiente, especialmente cuando se trata de valores discretos y definidos.",
          "type": "highlight",
          "color": "#10B981",
          "opacity": 0.3
        }
      ],
      "examples": [
        {
          "title": "Ejemplo: Algoritmo para verificar si un número es positivo",
          "problem": "Este algoritmo evalúa si un número ingresado por el usuario es positivo. Si la condición se cumple, se muestra un mensaje; si no, simplemente no se hace nada más. Se utiliza una estructura condicional simple con if, sin incluir una alternativa (else), y se trabaja con datos primitivos numéricos (enteros).",
          "diagram": "assets/module2photos/diag9.png"
        },
        {
          "title": "Ejemplo: Algoritmo para aplicar un descuento según el monto de compra",
          "problem": "Este algoritmo solicita el monto total de una compra y determina si se debe aplicar un descuento. Si el monto es mayor o igual a 1000, se aplica un 10% de descuento; de lo contrario, no se aplica ningún descuento. Utiliza operadores aritméticos y relacionales.",
          "diagram": "assets/module2photos/diag10.png"
        },
        {
          "title": "Ejemplo: Algoritmo para clasificar una calificación numérica",
          "problem": "Este algoritmo permite clasificar una calificación ingresada por el usuario (dato primitivo tipo float) en tres categorías: Aprobado, Regular o Reprobado, utilizando una estructura condicional if-else anidada.",
          "diagram": "assets/module2photos/diag11.png"
        },
        {
          "title": "Ejemplo: Algoritmo para mostrar el día de la semana según un número",
          "problem": "Este algoritmo solicita al usuario un número entero del 1 al 7 y, utilizando una estructura switch, muestra el nombre correspondiente del día de la semana. Solo se emplean datos primitivos tipo entero (int).",
          "diagram": "assets/module2photos/diag12.png"
        },
        {
          "title": "Ejemplo: Algoritmo para mostrar una cuenta regresiva a partir de un número del 1 al 3",
          "problem": "Este algoritmo muestra una serie de mensajes según el número que el usuario ingrese (1, 2 o 3). Como no se incluyen sentencias break, se ejecutan todas las instrucciones de los casos siguientes después de la coincidencia. Esto permite, por ejemplo, crear una cuenta regresiva de varios pasos sin repetir lógica.",
          "diagram": "assets/module2photos/diag13.png"
        }
      ]
    },
    {
      "title": "Bucles (while, for, do-while)",
      "notes": [
        {
          "content": "Permiten repetir un conjunto de instrucciones varias veces, se presenta cuando necesitamos realizar la misma acción en diferentes valores, o cuando no sabemos cuántas veces una condición será verdadera.\n\nSon complementadas por una condicional, por lo que es primordial comprender el funcionamiento de estas. Hay dos tipos principales de bucles: for y while, cada uno tiene una estructura y función diferente.",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "content": "“Los bucles son estructuras con fragmentos de código que se ejecutan repetidas veces dependiendo de si una condición se cumple o no, continua hasta que la condición se vuelve falsa”.",
              "type": "highlight",
              "color": "#1E40AF",
              "opacity": 0.3
            }
          ]
        },
        {
          "title": "Bucle for",
          "content": "Esta estructura es similar al bucle while, en este la operación se ejecuta para un número determinado de repeticiones, se utiliza para iterar en una secuencia de elementos.\n\nLa idea principal es repetir un bloque de código un número específico de veces o para cada elemento en una colección.",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "title": "¿Qué es?",
              "content": "Estructura de control que ejecuta repetidamente en un bloque de código un número de veces conocido”.",
              "type": "highlight",
              "color": "#1E40AF",
              "opacity": 0.3
            }
          ]
        },
        {
          "title": "¿Cuándo utilizarlo?",
          "content": "Este tipo de estructura se puede implementar en distintos casos, pero los más comunes son:\n\nRecorrer una lista de elementos.\n\nSolicitar una serie de números al usuario, cuando se conoce de antemano cuántas veces se debe realizar la solicitud.\n\nRealizar sumatorias u otras operaciones repetitivas donde el número de pasos a ejecutar es conocido.\n\nIterar un número específico de veces utilizando un rango numérico.\n\nEs ideal cuando se conoce de antemano el número de veces que se debe ejecutar un bloque de código, reduciendo la complejidad del código y haciendo que el código sea más legible y menos propenso a errores de \"fuera de rango\".",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "title": "Bucle while",
          "content": "Esta estructura es de las más simples, como su nombre lo dice, el bucle while ejecuta las instrucciones dentro de su bloque mientras o siempre que se cumpla una condición.\n\nSi en algún momento la condición se evalúa como falsa, el bucle se detiene y la ejecución continúa con el código después del bucle.",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "title": "¿Qué es?",
              "content": "Estructura de control que ejecuta repetidamente en un bloque de código, continua mientras la condición sea verdadera”.",
              "type": "highlight",
              "color": "#1E40AF",
              "opacity": 0.3
            }
          ]
        },
        {
          "title": "¿Cuándo utilizarlo?",
          "content": "Los casos más ideales en donde se debe implementar son los siguientes:\n\nSi necesitas leer datos de un archivo hasta un final específico o se encuentre cierta información.\n\nEjecución hasta que una variable cambie.\n\nComprobar las veces que se cumple una condición sin un número fijo.\n\nCuando el número exacto de iteraciones que se deben realizar no se conoce de antemano.\n\nEs aplicado sobre todo cuando no hay un número exacto de repeticiones, en contraste con el funcionamiento del ciclo for.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "title": "Bucle do-while",
          "content": "Esta estructura asegura que el código dentro del bucle se ejecute al menos una vez.\n\nA diferencia del bucle while, el do-while es ideal en situaciones donde necesitas que el bloque de código se ejecute sí o sí la primera vez, como en la validación de entrada del usuario o al presentar un menú de opciones. El bucle continuará repitiéndose mientras la condición especificada se mantenga verdadera.",
          "color": "#1E40AF",
          "opacity": 0.3,
          "notes": [
            {
              "title": "¿Qué es?",
              "content": "Estructura de control que ejecuta repetidamente en un bloque de código, continua hasta que la condición se vuelve falsa”.",
              "type": "highlight",
              "color": "#1E40AF",
              "opacity": 0.3
            }
          ]
        },
        {
          "title": "¿Cuándo utilizarlo?",
          "content": "Particularmente útil en situaciones donde necesitas que el bloque de código dentro del bucle se ejecute al menos una vez, y luego la continuación de las iteraciones depende de una condición que se evalúa al final de cada ejecución.\n\nValidación de entrada del usuario.\n\nAl presentar un menú de opciones a un usuario.\n\nRepetición de una acción hasta que se cumpla una condición.\n\nLa clave para elegir un do-while es la necesidad de garantizar la primera ejecución del bloque de código. Si la condición debe verificarse antes de la primera ejecución, un bucle while simple sería más apropiado.",
          "color": "#1E40AF",
          "opacity": 0.3
        },
        {
          "content": "Es importante saber identificar en qué momento es mejor aplicar cada bloque, es decir, si es necesario un for, while o do-while. En programación un bucle es utilizado generalmente para buscar y procesar datos, interactuar con el usuario. Por ejemplo, para pedir al usuario que ingrese una serie de números, etc.\n\nDeben contener una condición de salida clara y que sean controlados adecuadamente para evitar bucles infinitos. Por ello, se debe aumentar o cambiar la condición de parada en cada iteración.",
          "type": "highlight",
          "color": "#10B981",
          "opacity": 0.3
        }
      ],
      "examples": [
        {
          "title": "Ejemplo con bucle for: Mostrar los primeros 5 números pares",
          "problem": "",
          "diagram": "assets/module2photos/for.png"
        },
        {
          "title": "Ejemplo con bucle while: Contar del 1 al 5",
          "problem": "",
          "diagram": "assets/module2photos/diag14.png"
        },
        {
          "title": "Ejemplo con bucle do-while: Solicitar un número hasta que sea mayor que 10",
          "problem": "",
          "diagram": "assets/module2photos/diag15.png"
        }
      ]
    }
  ]
}