{
  "introduccion": {
    "highlight1": {
      "text": "En programación, una estructura de datos permite almacenar y organizar la información que un programa necesita para funcionar correctamente. Por otro lado, las estructuras de control determinan cómo fluye la ejecución de ese programa dependiendo de condiciones, decisiones o repeticiones. Unir ambas es esencial para crear algoritmos útiles, organizados y eficientes."
    },
    "highlight2": {
      "text": "A continuación, exploraremos las estructuras de datos más utilizadas junto con ejemplos que integran condicionales (if, else) y ciclos (for, while), para que veas cómo se combinan en la práctica."
    }
  },
  "subtema1": {
    "titulo": "Arreglos, matrices, listas, etc.",
    "highlight1": {
      "text": "En programación, existen diferentes formas de almacenar y organizar datos. Entre las más básicas y fundamentales se encuentran los arreglos, las matrices y las listas. Estas estructuras permiten agrupar múltiples valores bajo un mismo nombre, facilitando el acceso, la modificación y el recorrido de los datos."
    },
    "contenido": "Estas estructuras son esenciales porque sirven como base para construir otras estructuras más complejas, como pilas, colas, árboles o tablas hash. Además, son ideales para resolver problemas donde se necesita manejar grandes cantidades de datos, repetir operaciones o realizar búsquedas de forma ordenada.",
    "highlight2": {
      "text": "Comprender cómo funcionan y cómo se usan te permitirá desarrollar soluciones más limpias, eficientes y fáciles de mantener."
    },
    "arreglos": {
      "definicion": "“Estructuras de datos compuestos en las que se utilizan uno o más subíndices para identificar los elementos individuales almacenados, a los que es posible tener acceso en cualquier orden”.",
      "contenido": "Permite acceder a cada elemento mediante un índice numérico, lo que facilita la manipulación de grandes volúmenes de información. Son imprescindibles y existen distintos tipos, vectores, tuplas, etc.",
      "ejemplo": {
        "titulo": "Ejemplo: Contar cuántos números pares hay en un arreglo",
        "descripcion": "Dado un arreglo de 5 números enteros, el programa debe recorrerlo y contar cuántos de ellos son pares. Al final, debe mostrar el total de números pares encontrados.",
        "pseudocodigo": "numeros ← [3, 8, 5, 12, 7]\ncontador ← 0\nPARA i ← 0 HASTA 4 HACER\n    SI numeros[i] MOD 2 = 0 ENTONCES\n        contador ← contador + 1\n    FIN SI\nFIN PARA\nmostrar \"Cantidad de números pares: \" + contador",
        "diagrama": "diag16.png",
        "conclusion": "En el contexto de los sistemas de cómputo, un arreglo es una estructura de datos que hace referencia a un grupo de casillas de memoria que se puede ver como una colección finita, homogénea y ordenada de elementos."
      },
      "usos": {
        "text": "Los arreglos son fundamentales en muchas aplicaciones de software y se utilizan para:\n\nAlmacenar grandes volúmenes de datos de manera eficiente.\nOptimizar el rendimiento de algoritmos de búsqueda y ordenamiento.\nManejar datos en estructuras más complejas como grafos y listas enlazadas.\nFacilitar el procesamiento de imágenes y señales en inteligencia artificial."
      }
    }
  },
  "subtema2": {
    "titulo": "Matrices",
    "highlight1": {
      "text": "Además de las herramientas unidimensionales como arreglos o listas, existe una estructura más compleja llamada matriz, también conocida como arreglo bidimensional. Una matriz puede imaginarse como una tabla con filas y columnas, donde cada fila es en sí misma una secuencia ordenada de elementos."
    },
    "ejemplo": {
      "titulo": "Ejemplo: Sumar todos los elementos de una matriz",
      "descripcion": "Dada una matriz de 2 filas por 3 columnas con números enteros, el programa debe recorrer todos los elementos y calcular la suma total. Al final, debe mostrar el resultado de la suma.",
      "pseudocodigo": "matriz ← [[4, 2, 1], [6, 3, 5]]\nsuma ← 0\nPARA i ← 0 HASTA 1 HACER\n    PARA j ← 0 HASTA 2 HACER\n        suma ← suma + matriz[i][j]\n    FIN PARA\nFIN PARA\nmostrar \"La suma total es: \" + suma",
      "diagrama": "diag17.png"
    },
    "operaciones": {
      "text": "Operaciones comunes con matrices:\n\nAcceder a un elemento específico: matriz[fila][columna]\nRecorrer una matriz con bucles anidados.\nModificar valores de celdas específicas.\nSumar, restar, multiplicar matrices.\nTransponer (intercambiar filas por columnas)."
    },
    "definicion": {
      "text": "Desde el punto de vista de programación, una matriz es una secuencia de secuencias: un arreglo donde cada elemento es a su vez otro arreglo. Por esta razón, las matrices también pueden extenderse a más dimensiones (matrices tridimensionales, etc.), aunque lo más común es trabajar con matrices de dos dimensiones."
    }
  },
  "subtema3": {
    "titulo": "Listas",
    "highlight1": {
      "text": "Una lista es una colección ordenada de elementos. Puede contener distintos tipos de datos y permite duplicados. En muchos lenguajes de programación, las listas son estructuras dinámicas que pueden cambiar de tamaño durante la ejecución."
    },
    "caracteristicas": {
      "titulo": "Características",
      "items": [
        "Tamaño variable.",
        "Puede permitir distintos tipos de datos (como en Python).",
        "Métodos integrados para agregar, eliminar, buscar u ordenar elementos"
      ]
    },
    "ejemplo": {
      "titulo": "Ejemplo: Eliminar los elementos menores a 10 de una lista",
      "descripcion": "Dada una lista de números, el programa debe recorrerla y eliminar aquellos elementos que sean menores a 10. Al final, debe mostrar la lista resultante con solo los números mayores o iguales a 10.\n\nLista de ejemplo: [4, 15, 8, 23, 7, 12]\n\nResultado esperado: [15, 23, 12]",
      "pseudocodigo": "lista ← [4, 15, 8, 23, 7, 12]\nnuevaLista ← []\nPARA cada elemento EN lista HACER\n    SI elemento ≥ 10 ENTONCES\n        agregar elemento a nuevaLista\n    FIN SI\nFIN PARA\nmostrar nuevaLista",
      "diagrama": "diag18.png"
    },
    "comparacion": {
      "text": "Son muy parecidas a los arreglos, pero no son lo mismo, mientras que los arreglos son ideales cuando conoces la cantidad fija de datos y buscas eficiencia, las listas son más flexibles para trabajar con información dinámica."
    },
    "usos": {
      "text": "Estas estructuras son muy útiles cuando se quiere representar un objeto o entidad con varias características. Por ejemplo, un estudiante puede tener nombre, edad, matrícula y promedio, y todas estas propiedades pueden agruparse en un solo registro.\n\nEl uso de diccionarios mejora la organización de datos y hace que el código sea más legible, especialmente cuando se manejan datos que tienen una relación semántica clara."
    }
  },
  "subtema4": {
    "titulo": "¿Cómo aplicarlo en estructuras de control?",
    "highlight1": {
      "text": "En programación, las estructuras de datos y las estructuras de control son dos de los pilares fundamentales que permiten resolver problemas de manera efectiva y eficiente. Estas herramientas trabajan de forma complementaria, y su combinación es clave para desarrollar programas que no solo sean funcionales, sino también escalables y optimizados.\n\nLa verdadera magia ocurre cuando combinamos estas estructuras. Usando estructuras de datos para almacenar información y estructuras de control para procesarla, podemos escribir algoritmos mucho más poderosos. Por ejemplo, podríamos tener una lista de elementos y usar un bucle para recorrerla, o una pila para manejar un conjunto de datos que debe seguir un orden específico. A través de las decisiones condicionales, podemos determinar qué acción tomar con los datos en función de sus valores o de condiciones externas."
    },
    "importancia": {
      "text": "Optimización del tiempo: El uso adecuado de estructuras de datos con estructuras de control permite realizar operaciones como búsqueda, ordenamiento o filtrado de datos de manera eficiente, minimizando el tiempo de ejecución.\n\nEscalabilidad: Cuando trabajamos con grandes cantidades de datos, tener las estructuras adecuadas hace que nuestro programa sea capaz de manejar de manera eficiente conjuntos de información más grandes.\n\nResolución de problemas más complejos: Muchas veces, la solución a un problema requiere la combinación de diferentes tipos de datos y operaciones lógicas. Usar estas herramientas permite desarrollar soluciones más robustas y flexibles."
    },
    "acceso": {
      "text": "El acceso y manipulación de datos son tareas fundamentales en la programación, ya que permiten que un programa obtenga, modifique y gestione la información que maneja. Estas operaciones son clave para resolver problemas y para que un sistema pueda realizar funciones útiles, como mostrar información al usuario, procesar datos y tomar decisiones en función de esos datos."
    },
    "ejemplo1": {
      "titulo": "Ejemplo de acceso y modificación de datos en un arreglo",
      "descripcion": "Imagina que tenemos un arreglo con los números [5, 12, 8, 20, 3], y queremos acceder a cada número y multiplicar por 2 aquellos que sean mayores que 10.",
      "pseudocodigo": "Arreglo: [5, 12, 8, 20, 3]\nPara cada elemento \"número\" en el Arreglo:\n    Si número > 10:\n        número = número * 2\n    FinSi\nFinPara",
      "diagrama": "diag19.png"
    },
    "listas": {
      "text": "Las estructuras de control juegan un papel fundamental cuando se trata de manipular listas. Las listas, como estructuras de datos, permiten almacenar múltiples valores en un solo objeto, y las estructuras de control permiten recorrer, filtrar, modificar y organizar esos valores de acuerdo con ciertas condiciones o repeticiones."
    },
    "ejemplo2": {
      "titulo": "Agregar, modificar y eliminar elementos en una lista",
      "descripcion": "Tenemos una lista de estudiantes con sus calificaciones. Queremos realizar las siguientes operaciones:\n\nAgregar un nuevo estudiante: (\"María\", 90)\nModificar la calificación de \"Luis\" a 95.\nEliminar a \"Carlos\" de la lista.",
      "pseudocodigo": "Lista de estudiantes: [(\"Ana\", 85), (\"Luis\", 92), (\"Carlos\", 78)]\n1. Agregar (\"María\", 90) a la lista de estudiantes.\n2. Para cada estudiante en la lista de estudiantes:\n    Si el nombre del estudiante es \"Luis\":\n        Modificar calificación a 95\n    FinSi\n3. Eliminar a \"Carlos\" de la lista.",
      "diagrama": "diag20.png"
    },
    "matrices": {
      "text": "La relación entre las estructuras de control y las matrices es muy similar a la que tienen con las listas, pero con the particularidad de que las matrices son estructuras de datos bidimensionales. Es decir, una matriz puede contener múltiples filas y columnas, lo que la hace ideal para representar tablas de datos, como calificaciones de estudiantes en diferentes materias o coordenadas espaciales."
    },
    "ejemplo3": {
      "titulo": "Manipulación de una matriz",
      "descripcion": "Imaginemos que tenemos una matriz con las calificaciones de varios estudiantes en varias materias. Queremos aumentar todas las calificaciones en 5 puntos.",
      "pseudocodigo": "Matriz de calificaciones:\n[ [85, 92, 78],\n  [88, 76, 90],\n  [91, 84, 85] ]\nPara cada fila en la Matriz de calificaciones:\n    Para cada calificación en la fila:\n        Aumentar calificación en 5\n    FinPara\nFinPara",
      "diagrama": "diag21.png"
    },
    "diccionarios": {
      "text": "Las estructuras tipo registro (también conocidas como diccionarios o mapas) son colecciones de datos donde cada elemento está formado por una clave única y un valor asociado. A diferencia de las listas o matrices, que almacenan elementos de manera secuencial, los diccionarios permiten acceder a los elementos mediante una clave única, lo que los hace especialmente útiles cuando se requiere acceder a los datos de manera rápida y con un identificador específico."
    }
  },
  "quiz": {
    "titulo": "Evaluación de Estructuras de Datos y Control",
    "descripcion": "Pon a prueba tus conocimientos sobre las estructuras de datos y control con las siguientes preguntas. Selecciona la opción correcta o indica si la afirmación es verdadera o falsa.",
    "preguntas": [
      {
        "tipo": "multiple_choice",
        "pregunta": "¿Qué estructura de control es más adecuada para contar los números pares en un arreglo, como en el ejemplo donde se recorre [3, 8, 5, 12, 7]?",
        "opciones": [
          "if-else",
          "for",
          "while",
          "switch"
        ],
        "respuesta_correcta": "for",
        "explicacion": "Un bucle for es ideal para recorrer un arreglo de tamaño fijo, como en el ejemplo donde se cuenta los números pares en [3, 8, 5, 12, 7], ya que permite iterar sobre cada índice de manera ordenada."
      },
      {
        "tipo": "true_false",
        "pregunta": "Una matriz requiere bucles anidados para recorrer todos sus elementos, como en el ejemplo de sumar los elementos de [[4, 2, 1], [6, 3, 5]].",
        "respuesta_correcta": true,
        "explicacion": "Debido a que una matriz es bidimensional, con filas y columnas, se necesitan bucles anidados (uno para las filas y otro para las columnas) para recorrer todos sus elementos, como se muestra en el ejemplo de suma."
      },
      {
        "tipo": "multiple_choice",
        "pregunta": "¿Cuál es una característica clave de las listas que las diferencia de los arreglos, según el contenido del módulo?",
        "opciones": [
          "Tienen tamaño fijo",
          "Solo almacenan datos del mismo tipo",
          "Pueden cambiar de tamaño dinámicamente",
          "Se accede a ellas mediante claves únicas"
        ],
        "respuesta_correcta": "Pueden cambiar de tamaño dinámicamente",
        "explicacion": "Las listas, a diferencia de los arreglos, son estructuras dinámicas que pueden cambiar de tamaño durante la ejecución, como se menciona en el subtema de listas."
      }
    ]
  },
  "video": {
    "id": "walAu_skXHA",
    "description": "Aprende con este video tutorial"
  }
}