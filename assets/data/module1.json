{
  "module_title": "Módulo 1: Introducción a la Programación",
  "welcome": {
    "title": "¡Bienvenido al mundo de la programación!",
    "description": "En este módulo inicial, descubrirás los fundamentos esenciales para comenzar tu viaje como programador. La programación es como aprender un nuevo idioma, pero en lugar de comunicarte con personas, estarás dando instrucciones precisas a una computadora."
  },
  "syllabus": {
    "title": "Temario completo:",
    "sections": [
      {
        "title": "I. Conceptos clave antes de escribir código",
        "items": [
          "¿Qué es un lenguaje de programación?",
          "Diferencia entre software y hardware",
          "Tipos de lenguajes: Bajo nivel vs. Alto nivel"
        ]
      },
      {
        "title": "II. Pensamiento lógico y resolución de problemas",
        "items": [
          "Descomposición de problemas en pasos simples",
          "Identificación de patrones",
          "Toma de decisiones"
        ]
      },
      {
        "title": "III. Introducción a los diagramas de flujo",
        "items": [
          "¿Qué es y para qué sirve?",
          "Símbolos básicos y su significado",
          "Representación de procesos"
        ]
      },
      {
        "title": "IV. Conceptos clave en diagramas de flujo",
        "items": [
          "Entrada de datos",
          "Procesos y decisiones",
          "Tipos de operadores",
          "Salida de resultados"
        ]
      }
    ]
  },
  "learning_points": {
    "title": "En este módulo aprenderás:",
    "points": [
      {
        "icon": "computer",
        "title": "Conceptos clave antes de escribir código",
        "description": "Entenderás la diferencia fundamental entre hardware y software, los componentes básicos de una computadora y cómo interactúan con los programas."
      },
      {
        "icon": "psychology",
        "title": "Pensamiento lógico y resolución de problemas",
        "description": "Desarrollarás la capacidad de dividir problemas complejos en pasos más pequeños que una computadora pueda entender y resolver."
      },
      {
        "icon": "account_tree",
        "title": "Introducción a los diagramas de flujo",
        "description": "Aprenderás a representar visualmente procesos y algoritmos antes de escribir código, una habilidad esencial para cualquier programador."
      },
      {
        "icon": "account_tree",
        "title": "Conceptos clave en diagramas de flujo",
        "description": "Profundizarás en los elementos clave de los diagramas de flujo y cómo representar procesos complejos con decisiones y operadores."
      }
    ]
  },
  "motivation": {
    "text": "No te preocupes si al principio algunos conceptos parecen difíciles. Todos los grandes programadores comenzaron exactamente donde tú estás ahora. ¡Lo importante es dar el primer paso!",
    "icon": "lightbulb_outline"
  },
  "button_text": "Comenzar módulo",
  "content": {
    "section_1": {
      "title": "I. Conceptos clave antes de escribir código",
      "subsections": [
        {
          "title": "¿Qué es un lenguaje de programación?",
          "content": "Un lenguaje de programación es una herramienta esencial que permite a los programadores comunicarse con las computadoras para ejecutar instrucciones y resolver problemas. Tal como lo mencionan expertos como Brian Kernighan y Bjarne Stroustrup, los lenguajes de programación no solo permiten escribir instrucciones que la computadora entiende, sino que también facilitan la expresión de soluciones eficientes a problemas complejos.\n\nDado que la programación es un proceso que requiere pensamiento lógico, el uso de un lenguaje de programación adecuado facilita la descomposición de problemas en pasos más simples y la identificación de patrones para tomar decisiones informadas. El pensamiento lógico se manifiesta al escribir código que es claro, organizado y estructurado, lo cual es crucial tanto para resolver problemas como para crear soluciones eficaces."
        },
        {
          "title": "Clasificación de los lenguajes de programación",
          "content": "Existen diferentes formas de clasificar los lenguajes de programación, y cada una tiene un impacto significativo en cómo los programadores abordan la resolución de problemas. La clasificación de los lenguajes de programación según su nivel de abstracción y los paradigmas que siguen es un aspecto relevante para los programadores, ya que cada tipo de lenguaje tiene ventajas que pueden ser aprovechadas dependiendo del tipo de problema que se desea resolver.\n\nLos lenguajes de alto nivel (como Python y Java) están diseñados para que los programadores puedan centrarse en la lógica del problema sin preocuparse demasiado por los detalles técnicos del hardware.\n\nLos lenguajes de bajo nivel (como C o Ensamblador) requieren un control más detallado del hardware, lo que puede ser útil en situaciones donde se necesita optimización de recursos o una ejecución extremadamente eficiente.\n\nMás adelante nos centraremos en la definición, características y ventajas de cada uno de estos. Entender cómo se clasifica y estructura un lenguaje de programación no solo ayuda a elegir el más adecuado para una tarea, sino que también permite aplicar el pensamiento lógico de manera más efectiva al resolver problemas."
        },
        {
          "title": "Diferencia entre software y hardware",
          "content": "En este contexto es fundamental conocer las diferencias entre el software y hardware. Si no estas familiarizado con estos conceptos se definirá cada uno de ellos, ya que son esenciales para una computadora.\n\n¿Qué es el hardware?\n\nEl hardware es el conjunto de componentes físicos y tangibles de un sistema informático, es decir, todo aquello que podemos ver y tocar de un dispositivo tecnológico, tanto en su interior como en su exterior.\n\nAlgunos ejemplos de hardware dentro del contexto informático son:\n\n• Procesador (CPU)\n• Memoria RAM\n• Disco duro o SSD\n• Teclado y ratón\n• Monitor\n\n¿Qué es el software?\n\nEl software es el conjunto de instrucciones, programas y datos que permiten el funcionalidad de una computadora y la realización de tareas específicas. En contraste con el hardware, el software no es tangible, pero es igualmente esencial para el sistema.\n\nAlgunos ejemplos de software son:\n\n• Sistemas operativos (Windows, macOS, Linux)\n• Navegadores web (Google Chrome, Mozilla Firefox)\n• Procesadores de texto (Microsoft Word)\n• Aplicaciones móviles (WhatsApp, Spotify)",
          "highlight": {
            "text": "Un sistema operativo es el software que gestiona los recursos de una computadora o dispositivo, que permite la ejecución de programas y facilita la interacción entre el usuario y el hardware.",
            "color": "blue"
          }
        },
        {
          "title": "Relación entre hardware y software",
          "content": "El hardware y el software trabajan en conjunto para que una computadora o dispositivo funcione correctamente. Mientras el hardware proporciona los recursos físicos, el software dicta las instrucciones que permiten su uso eficiente.\n\nSu integración impacta directamente en el rendimiento, la productividad y la experiencia del usuario, ya que un hardware potente sin un software optimizado, o viceversa, puede limitar el desempeño del sistema. Sin software, el hardware no puede ejecutar tareas, y sin hardware, el software no puede funcionar.\n\nLa evolución tanto del hardware como del software ha permitido el desarrollo de nuevas tecnologías y una mejora continua en la eficiencia de los sistemas. Mientras el hardware avanza en términos de potencia y capacidad, el software se optimiza para aprovechar esos avances."
        },
        {
          "title": "Tipos de lenguajes: Bajo nivel vs. Alto nivel",
          "content": "En el mundo de la programación, los lenguajes de programación se clasifican principalmente en dos grupos: lenguajes de bajo nivel y lenguajes de alto nivel. Con esto se busca reflejar el grado en que un lenguaje oculta detalles complejos del hardware, facilitando la escritura y comprensión del código para el programador.\n\nLos lenguajes de bajo nivel están más cerca del hardware y permiten un control detallado sobre los recursos del sistema, aunque su uso suele ser más complejo. En cambio, los lenguajes de alto nivel están diseñados para ser más fáciles de aprender y utilizar, lo que los convierte en los más comunes. Sin embargo, estos sacrifican algo de control sobre el hardware a cambio de mayor flexibilidad y portabilidad.\n\nEntender la diferencia entre estos tipos de lenguajes es crucial para elegir la herramienta adecuada a la hora de desarrollar un proyecto, según el tipo de aplicación, el rendimiento y el nivel de interacción con el hardware requerido."
        },
        {
          "title": "Lenguajes de bajo nivel",
          "content": "Como se mencionó anteriormente, los lenguajes de bajo nivel están diseñados para interactuar de manera directa con el hardware de la computadora. Ofrecen un control preciso sobre los recursos del sistema, permitiendo a los programadores gestionar aspectos específicos del funcionamiento del procesador, la memoria y otros componentes. Aunque proporcionan un alto grado de control, su uso suele ser más complejo y requiere un conocimiento más profundo de la arquitectura del sistema.\n\nDefinición:\n\nUn lenguaje de bajo nivel es aquel que está más cercano al lenguaje de la máquina y a la arquitectura específica de un hardware. Se utiliza para programar directamente sobre el hardware, lo que permite un control detallado sobre los recursos del sistema.",
          "highlight": {
            "text": "Nota:\n\nLa definición y descripción se basan en principios ampliamente aceptados en la literatura de la informática, como los expuestos por autores como Andrew S. Tanenbaum en \"Structured Computer Organization\" y Donald E. Knuth en \"The Art of Computer Programming\". Estos textos son fundamentales para comprender la relación entre los lenguajes de programación y la arquitectura de hardware.",
            "color": "green"
          },
          "additional_content": "Los lenguajes de bajo nivel permiten un control preciso sobre los recursos del sistema, lo que facilita la optimización del rendimiento. Sin embargo, esta capacidad de control viene acompañada de una mayor complejidad, ya que el programador debe gestionar aspectos específicos del hardware y poseer un conocimiento técnico más profundo.\n\nOtro aspecto importante es que los lenguajes de bajo nivel son dependientes de la arquitectura específica del hardware, lo que limita su portabilidad entre diferentes sistemas. A pesar de esta limitación, son particularmente útiles en áreas como sistemas embebidos, controladores de hardware y aplicaciones donde el rendimiento y la eficiencia son cruciales.\n\nLas ventajas de estos lenguajes son claras. En primer lugar, ofrecen un control directo sobre el hardware, lo que permite optimizar el rendimiento y la eficiencia. Los programas pueden ejecutarse de manera más rápida y hacer un uso más efectivo de los recursos del sistema. Además, son ideales para el desarrollo de sistemas específicos, como controladores y firmware, que requieren un alto nivel de interacción con el hardware. Aunque limitados en términos de portabilidad, los lenguajes de bajo nivel permiten a los programadores hacer ajustes precisos y personalizados según las necesidades del proyecto."
        },
        {
          "title": "Lenguajes de alto nivel",
          "content": "Los lenguajes de alto nivel están diseñados para ser más abstractos y fáciles de usar en comparación con los lenguajes de bajo nivel. Estos lenguajes están más alejados de la máquina y están orientados a facilitar la programación para los seres humanos, permitiendo escribir código que sea comprensible y menos propenso a errores. Debido a su enfoque en la simplicidad, los lenguajes de alto nivel permiten a los programadores concentrarse en la lógica y funcionalidad de la aplicación sin tener que preocuparse por los detalles del hardware.\n\nDefinición:\n\nUn lenguaje de alto nivel es aquel que está diseñado para ser fácilmente comprendido por los programadores. Utiliza una sintaxis más cercana al lenguaje humano y abstrae los detalles del hardware, permitiendo escribir código más intuitivo y eficiente.",
          "highlight": {
            "text": "Nota:\n\nLos lenguajes de alto nivel han acelerado el desarrollo de software al ofrecer una sintaxis comprensible, permitiendo a los desarrolladores escribir código más rápido y de forma más eficiente. Esto ha sido clave en proyectos de gran escala, como aplicaciones móviles, juegos y sistemas de información, donde la colaboración entre equipos grandes es esencial.",
            "color": "green"
          },
          "additional_content": "Los lenguajes de alto nivel simplifican la programación al abstraer los complejos detalles del hardware, lo que facilita su aprendizaje y uso. Esto permite a los programadores enfocarse en resolver problemas sin tener que preocuparse por la gestión de recursos del sistema. Aunque este nivel de abstracción puede conllevar una menor eficiencia en comparación con los lenguajes de bajo nivel, los lenguajes de alto nivel son esenciales para el desarrollo de aplicaciones grandes y complejas, donde la facilidad de mantenimiento y la productividad del programador son más importantes que la eficiencia absoluta.\n\nUna ventaja clave de los lenguajes de alto nivel es su portabilidad. Estos lenguajes permiten que el mismo código funcione en diferentes plataformas, lo que facilita su desarrollo y distribución. A diferencia de los lenguajes de bajo nivel, que dependen de la arquitectura específica del hardware, los lenguajes de alto nivel pueden ejecutarse en diversos sistemas sin requerir modificaciones significativas.\n\nEn general, los lenguajes de alto nivel permiten un desarrollo rápido de software y son ampliamente utilizados en la programación de aplicaciones, sistemas operativos, videojuegos, aplicaciones web y móviles, entre otros. Además, su sintaxis más cercana al lenguaje humano y su amplia disponibilidad de herramientas y bibliotecas hacen que sean los lenguajes más populares y accesibles para la mayoría de los programadores."
        }
      ]
    },
    "section_2": {
      "title": "II. Pensamiento lógico y resolución de problemas",
      "subsections": [
        {
          "title": "Subtema 2. Pensamiento lógico y resolución de problemas",
          "content": "El pensamiento lógico es la capacidad de analizar, organizar y estructurar información de manera coherente, lo que facilita la identificación de relaciones y la resolución eficiente de problemas. Este tipo de pensamiento no solo es esencial para programadores e ingenieros, sino que también juega un papel clave en situaciones cotidianas, donde la toma de decisiones claras y fundamentadas es crucial.\n\nEn el contexto de la programación, el pensamiento lógico es fundamental, ya que permite a los desarrolladores descomponer problemas complejos en pasos más simples, identificar patrones de solución y tomar decisiones informadas sobre el enfoque más adecuado. Esta habilidad es clave para escribir código eficiente y desarrollar soluciones efectivas a los desafíos tecnológicos que enfrentan los programadores.\n\nUn aspecto esencial del pensamiento lógico es el proceso de resolución de problemas, que nos permite abordar los retos de manera sistemática y directa. Este proceso se puede dividir en varias etapas:\n\n1. Entender el Problema: Antes de comenzar a buscar soluciones, es fundamental comprender todos los aspectos del problema en cuestión. Esto implica analizarlo desde diferentes ángulos para asegurarse de que se tiene una visión completa del desafío.\n\n2. Descomposición: Una vez entendido el problema, el siguiente paso es dividirlo en partes más pequeñas y manejables. Esta descomposición permite abordar cada componente de manera independiente, simplificando su resolución.\n\n3. Búsqueda de Soluciones: Tras descomponer el problema, se deben explorar diferentes enfoques y estrategias posibles para resolverlo. Esto puede incluir investigar soluciones previas, pensar en alternativas innovadoras o consultar con otros expertos.\n\n4. Implementación: Después de elegir la solución más adecuada, se procede a implementarla. Esta etapa involucra aplicar las estrategias seleccionadas y ponerlas en práctica, asegurándose de que sean efectivas.\n\n5. Evaluación y Ajustes: Finalmente, es crucial evaluar si la solución realmente resuelve el problema y funciona como se esperaba. Si es necesario, se deben hacer ajustes o modificaciones para mejorar la solución y garantizar que cumpla con los objetivos planteados.\n\nEste proceso de resolución de problemas es clave para ser más efectivos en la toma de decisiones y en la creación de soluciones claras y viables."
        }
      ]
    },
    "section_3": {
      "title": "III. Introducción a los diagramas de flujo",
      "subsections": [
        {
          "title": "¿Qué es y para qué sirve?",
          "content": "Un diagrama de flujo es una representación gráfica de un proceso o algoritmo. Muestra los pasos como bloques de diferentes tipos conectados con flechas que indican el flujo del proceso.\n\nEstos diagramas son especialmente útiles en programación porque permiten visualizar la lógica de un programa antes de escribir el código, facilitando la detección de errores y la comunicación entre miembros del equipo."
        },
        {
          "title": "Símbolos básicos y su significado",
          "content": "Los diagramas de flujo utilizan símbolos estandarizados para representar diferentes elementos:\n\n• Óvalo: Indica el inicio o fin del proceso\n• Rectángulo: Representa una operación o proceso\n• Rombo: Señala una decisión o condición (normalmente contiene una pregunta)\n• Paralelogramo: Indica entrada o salida de datos\n• Flechas: Muestran la dirección del flujo del proceso",
          "highlight": {
            "text": "Consejo: Al crear diagramas de flujo, es importante mantener la consistencia en el uso de los símbolos para que sean fácilmente comprensibles por otros programadores.",
            "color": "blue"
          }
        },
        {
          "title": "Representación de procesos",
          "content": "Los diagramas de flujo pueden representar diferentes tipos de estructuras de programación:\n\n1. Secuenciales: Pasos que se ejecutan uno tras otro\n2. Condicionales: Decisiones que dividen el flujo (if/else)\n3. Repetitivas: Bucles que repiten procesos (while, for)\n\nCada tipo de estructura tiene una representación particular en el diagrama, manteniendo siempre la claridad y lógica del proceso."
        }
      ]
    },
    "section_4": {
      "title": "IV. Conceptos clave en diagramas de flujo",
      "subsections": [
        {
          "title": "Entrada de datos",
          "content": "La entrada de datos en un diagrama de flujo se representa con un paralelogramo y muestra cuando el sistema recibe información del usuario o de otra fuente externa.\n\nEjemplos comunes:\n• Ingresar usuario y contraseña\n• Introducir valores para un cálculo\n• Cargar datos desde un archivo"
        },
        {
          "title": "Procesos y decisiones",
          "content": "Los procesos (rectángulos) representan transformaciones o cálculos que se realizan con los datos. Las decisiones (rombos) son puntos donde el flujo puede bifurcarse según una condición.\n\nEjemplo típico:\n[Proceso] Calcular promedio → [Decisión] ¿Promedio >= 7? → Si: Aprobado / No: Reprobado",
          "highlight": {
            "text": "Buena práctica: Las preguntas en los rombos deben formularse para responderse con Sí/No, haciendo el flujo más claro.",
            "color": "green"
          }
        },
        {
          "title": "Tipos de operadores",
          "content": "En los diagramas de flujo se utilizan diferentes tipos de operadores:\n\n• Aritméticos: +, -, *, / para cálculos\n• Relacionales: >, <, ==, != para comparaciones\n• Lógicos: AND, OR, NOT para combinar condiciones\n\nEstos operadores permiten construir expresiones complejas en las decisiones y procesos."
        },
        {
          "title": "Salida de resultados",
          "content": "La salida de datos, también representada con paralelogramos, muestra cuando el sistema presenta información al usuario o la envía a otro sistema.\n\nEjemplos:\n• Mostrar \"Login correcto\"\n• Imprimir un reporte\n• Guardar resultados en un archivo\n• Mostrar gráficos o visualizaciones"
        }
      ]
    }
  },
  "activities": [
    {
      "subtopic": "¿Qué es un lenguaje de programación?",
      "theory": {
        "question": "Según Brian Kernighan, ¿qué es un lenguaje de programación?",
        "options": [
          "Un conjunto de reglas y símbolos para escribir instrucciones que la computadora puede entender",
          "Una forma de arte digital",
          "Un tipo de lenguaje humano modificado",
          "Solo un conjunto de comandos matemáticos"
        ],
        "correctAnswer": 0
      },
      "reflection": "¿Por qué crees que es importante entender qué es un lenguaje de programación antes de comenzar a programar?",
      "practice": {
        "question": "Investiga y escribe con tus propias palabras qué es un lenguaje de programación.",
        "details": "Compara tu definición con las de los expertos mencionados."
      },
      "expandedContent": "Un lenguaje de programación es una herramienta que los programadores utilizan para comunicarse con las computadoras. Existen diversas formas de definirlo, y aquí compartimos algunas palabras de expertos en el tema.\n\nBrian Kernighan, un reconocido especialista en programación dice: \"Un lenguaje de programación es un conjunto de reglas y símbolos que permiten a los programadores escribir instrucciones que una computadora puede entender y ejecutar\". En otras palabras, son las reglas y símbolos que la computadora interpreta.\n\nPor otro lado, Bjarne Stroustrup, el creador de C++, afirma que \"un lenguaje de programación es una herramienta para expresar soluciones a problemas de manera que una computadora pueda ejecutar esas soluciones de forma eficiente\". Esto significa que estos lenguajes no solo ayudan a escribir instrucciones, ¡sino que también sirven para resolver diversos problemas!\n\nEn resumen, un lenguaje de programación es un sistema de reglas, sintaxis (la forma en que se organizan las instrucciones) y semántica (el significado de esas instrucciones) que permite a los programadores comunicarle a la computadora lo que debe hacer.\n\nPor lo tanto, podemos definir un lenguaje de programación como un conjunto de reglas y símbolos que permiten a una computadora interpretar instrucciones para resolver problemas de manera eficiente y desarrollar programas o software."
    },
    {
      "subtopic": "Diferencia entre software y hardware",
      "theory": {
        "question": "¿Qué diferencia hay entre software y hardware?",
        "options": [
          "El software es el conjunto de piezas físicas, y el hardware es el conjunto de programas.",
          "El software se refiere a programas y aplicaciones, el hardware a componentes físicos.",
          "Software y hardware son lo mismo.",
          "Ninguna de las anteriores."
        ],
        "correctAnswer": 1
      },
      "reflection": "¿Cómo puede el entendimiento de software y hardware mejorar tu capacidad para desarrollar aplicaciones eficientes?",
      "practice": {
        "question": "Clasifica los siguientes elementos en Software o Hardware.",
        "elements": [
          "Teclado",
          "Monitor",
          "Procesador",
          "Windows",
          "Antivirus",
          "Sistema operativo"
        ],
        "answers": {
          "Hardware": ["Teclado", "Monitor", "Procesador"],
          "Software": ["Windows", "Antivirus", "Sistema operativo"]
        }
      },
      "expandedContent": "I. Conceptos clave antes de escribir código\n\nDiferencia entre software y hardware:\n- Hardware: Componentes físicos (CPU, RAM, disco duro)\n- Software: Programas y datos (sistemas operativos, aplicaciones)\n\nTipos de lenguajes:\n- Bajo nivel: Cercano al hardware (ensamblador, código máquina)\n- Alto nivel: Más cercano al lenguaje humano (Python, Java, C++)"
    },
    {
      "subtopic": "Pensamiento lógico y resolución de problemas",
      "theory": {
        "question": "¿Cuál opción describe mejor la diferencia entre lenguajes de bajo y alto nivel?",
        "options": [
          "Bajo nivel más fácil para humanos, alto nivel solo para computadoras.",
          "Bajo nivel más cercano al hardware, alto nivel más comprensible para programadores.",
          "Alto nivel no requiere compilación, bajo nivel siempre necesita traductor.",
          "No hay diferencias."
        ],
        "correctAnswer": 1
      },
      "reflection": "¿Cómo elegirías entre un lenguaje de bajo o alto nivel según el proyecto?",
      "practice": {
        "question": "Observa fragmentos en lenguajes bajo y alto nivel. ¿Cuál es más fácil y por qué?",
        "details": "Explica considerando abstracción y facilidad de comprensión."
      },
      "expandedContent": "II. Pensamiento lógico y resolución de problemas\n\nDescomposición de problemas:\n- Dividir problemas complejos en subproblemas más pequeños\n- Ejemplo: Para hacer café: 1) Calentar agua, 2) Poner filtro, 3) Añadir café, etc.\n\nIdentificación de patrones:\n- Reconocer similitudes entre problemas\n- Reutilizar soluciones existentes\n\nToma de decisiones:\n- Evaluar condiciones (si-entonces-sino)\n- Considerar múltiples caminos posibles"
    },
    {
      "subtopic": "Introducción a los diagramas de flujo",
      "theory": {
        "question": "¿Qué es un diagrama de flujo y para qué sirve?",
        "options": [
          "Una herramienta visual para representar procesos.",
          "Un lenguaje de programación avanzado.",
          "Un conjunto de instrucciones matemáticas.",
          "Un diagrama utilizado solo en electrónica."
        ],
        "correctAnswer": 0
      },
      "reflection": "¿Cómo pueden los diagramas de flujo ayudarte a estructurar mejor tus programas?",
      "practice": {
        "question": "Dibuja un diagrama de flujo para un proceso simple, como hacer un café.",
        "details": "Incluye entrada, procesos y salida."
      },
      "expandedContent": "III. Introducción a los diagramas de flujo\n\n¿Qué es un diagrama de flujo?\n- Representación gráfica de un proceso o algoritmo\n- Muestra los pasos como bloques conectados con flechas\n- Útil para planificar antes de programar\n\nSímbolos básicos:\n- Óvalo: Inicio/Fin\n- Rectángulo: Proceso\n- Rombo: Decisión\n- Flechas: Flujo del proceso\n\nRepresentación de procesos:\n- Secuenciales (paso a paso)\n- Condicionales (decisiones)\n- Repetitivos (bucles)"
    },
    {
      "subtopic": "Conceptos clave en diagramas de flujo",
      "theory": {
        "question": "¿Qué elemento de un diagrama de flujo representa una decisión?",
        "options": [
          "Rectángulo",
          "Rombo",
          "Óvalo",
          "Flecha"
        ],
        "correctAnswer": 1
      },
      "reflection": "¿Por qué es importante definir claramente las entradas y salidas en un diagrama de flujo?",
      "practice": {
        "question": "Identifica los elementos en un diagrama de flujo complejo.",
        "details": "Marca entradas, procesos, decisiones y salidas."
      },
      "expandedContent": "IV. Conceptos clave en diagramas de flujo\n\nEntrada de datos:\n- Puntos donde el sistema recibe información\n- Ejemplo: Ingresar usuario y contraseña\n\nProcesos:\n- Transformaciones o cálculos\n- Ejemplo: Sumar dos números\n\nDecisiones:\n- Puntos donde el flujo puede bifurcarse\n- Ejemplo: Si edad >= 18 entonces \"Mayor\", sino \"Menor\"\n\nOperadores:\n- Aritméticos: +, -, *, /\n- Relacionales: >, <, ==\n- Lógicos: AND, OR, NOT\n\nSalida de resultados:\n- Presentación de información\n- Ejemplo: Mostrar \"Login correcto\""
    }
  ],
  "activity_descriptions": [
    "Fundamentos de lenguajes de programación",
    "Diferencias entre software y hardware",
    "Pensamiento algorítmico y resolución de problemas",
    "Creación y comprensión de diagramas de flujo",
    "Elementos avanzados de diagramas de flujo"
  ],
  "activity_completion_message": "Actividad completada y progreso guardado",
  "login_required_message": "Debes iniciar sesión primero.",
  "user_not_found_message": "Usuario no encontrado en la base de datos."
}