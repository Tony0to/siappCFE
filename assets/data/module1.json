{
  "module_title": "Módulo 1: Introducción a la Programación",
  "welcome": {
    "title": "¡Bienvenido al Módulo 1!",
    "subtitle": "Tu primer paso hacia la programación",
    "intro": "En este primer módulo, vamos a explorar conceptos clave fundamentales de la programación antes de sumergirnos en la escritura de código. A medida que avances, descubrirás que estos conceptos no solo te ayudarán a programar de manera efectiva, sino que también te enseñarán a pensar lógicamente y a resolver problemas como un verdadero programador.",
    "details": "Al finalizar este módulo, estarás mejor preparado para enfrentar desafíos más complejos, adquiriendo las habilidades necesarias para crear aplicaciones móviles innovadoras y funcionales. ¡Comencemos!"
  },
  "syllabus": {
    "title": "Temario completo:",
    "sections": [
      {
        "title": "I. Conceptos clave antes de escribir código",
        "items": [
          "¿Qué es la programación y por qué es importante?",
          "¿Cómo funciona una computadora?",
          "Componentes básicos: Software, Hardware y Datos",
          "Sistemas operativos y su relación con el software",
          "Representación de la información: Qué son los bits y bytes",
          "Representación básica de datos como números, texto e imágenes",
          "Proceso básico de funcionamiento",
          "¿Qué es un lenguaje de programación?",
          "Clasificación de los lenguajes de programación",
          "Según su nivel de abstracción: Bajo nivel vs. Alto nivel",
          "Según su paradigma: Imperativo, POO, Funcional, Lógico",
          "Diferencia entre compilador e intérprete",
          "Tipos de datos",
          "Primitivos: enteros, decimales, booleanos, caracteres",
          "No primitivos: cadenas, arreglos, estructuras"
        ]
      },
      {
        "title": "II. Pensamiento lógico y resolución de problemas",
        "items": [
          "¿Qué es el pensamiento lógico?",
          "Descomposición de problemas en pasos simples",
          "Identificación de patrones y toma de decisiones",
          "Tipos de patrones"
        ]
      },
      {
        "title": "III. Introducción a los diagramas de flujo",
        "items": [
          "¿Qué es un diagrama de flujo y para qué sirve?",
          "Características de un diagrama de flujo",
          "Cómo representar procesos con diagramas"
        ]
      },
      {
        "title": "IV. Conceptos y símbolos clave en diagramas de flujo",
        "items": [
          "Símbolos básicos y su función",
          "Conceptos clave en diagramas de flujo",
          "Tipos de operadores",
          "Salida de resultados"
        ]
      }
    ]
  },
  "learning_points": {
    "title": "En este módulo aprenderás:",
    "points": [
      {
        "icon": "computer",
        "title": "Fundamentos de programación",
        "description": "Comprenderás los conceptos esenciales como lenguajes de programación, software, hardware y tipos de datos."
      },
      {
        "icon": "psychology",
        "title": "Pensamiento lógico",
        "description": "Desarrollarás habilidades para descomponer problemas y tomar decisiones estructuradas."
      },
      {
        "icon": "account_tree",
        "title": "Diagramas de flujo",
        "description": "Aprenderás a representar procesos visualmente utilizando símbolos estandarizados."
      },
      {
        "icon": "code",
        "title": "Resolución de problemas",
        "description": "Aplicarás el razonamiento lógico para estructurar soluciones claras y eficientes."
      }
    ]
  },
  "motivation": {
    "text": "¡La programación comienza con una base sólida! Cada concepto que aprendas aquí te acercará a transformar tus ideas en soluciones reales.",
    "icon": "emoji_objects"
  },
  "button_text": "Comenzar Módulo",
  "content": {
    "section_1": {
      "title": "I. Conceptos clave antes de escribir código",
      "sectionImage": "https://media.istockphoto.com/id/1164357236/es/foto/desarrollo-de-programadores-que-leen-c%C3%B3digos-inform%C3%A1ticos-desarrollo-de-dise%C3%B1o-de-sitios-web-y.jpg?s=1024x1024&w=is&k=20&c=e1B6Bj6O2sa-_Nu6_iIFRQ9RNA9nc8JqmCXPct9d0eY=",
      "welcomeText": "Antes de comenzar a programar, es importante conocer algunos conceptos fundamentales que sentarán las bases de tu aprendizaje. Entender cómo se comunican los desarrolladores con las computadoras te ayudará a escribir código de manera más clara y efectiva. En este tema, exploraremos qué es un lenguaje de programación, por qué es una herramienta esencial en el desarrollo de software y cómo nos permite transformar ideas en soluciones concretas.\n\n¡Es hora de dar el primer paso en el mundo de la programación!",
      "subsections": [
        {
          "title": "¿Qué es la programación y por qué es importante?",
          "content": "La programación es el proceso de crear instrucciones que una computadora puede seguir para realizar tareas específicas. Estas instrucciones se escriben en un lenguaje de programación, que permite traducir las ideas humanas en acciones que una máquina puede entender y ejecutar.\n\nProgramar no solo se trata de escribir código, sino de resolver problemas, automatizar tareas, crear aplicaciones útiles y dar vida a proyectos digitales. Gracias a la programación, hoy contamos con páginas web, aplicaciones móviles, videojuegos, inteligencia artificial, robots, sistemas bancarios, entre muchos otros avances.\n\nAprender a programar es importante porque:\n• Desarrolla el pensamiento lógico y estructurado, útil en cualquier área.\n• Te permite construir soluciones propias a problemas cotidianos o profesionales.\n• Es una habilidad muy demandada, con aplicaciones en muchas industrias más allá de la informática.\n\nEntender cómo funciona una computadora y cómo darle instrucciones correctamente es el primer paso para adentrarte en el mundo de la tecnología. A lo largo de este módulo, aprenderás los conceptos esenciales que necesitas para comenzar a programar.",
          "style": [
            {"text": "La programación es el proceso de crear instrucciones", "fontSize": 16, "fontWeight": "w500", "fontStyle": "italic"},
            {"text": "resolver problemas, automatizar tareas", "fontWeight": "w700"},
            {"text": "pensamiento lógico y estructurado", "fontWeight": "w700"}
          ],
          "notes": [
            {
              "title": "Importancia",
              "content": "La programación impulsa la tecnología moderna, desde aplicaciones cotidianas hasta avances científicos.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ]
        },
        {
          "title": "¿Cómo funciona una computadora?",
          "content": "En esencia, una computadora es una máquina diseñada para procesar información. Aunque tiene muchas partes y procesos complejos, podemos entender su funcionamiento básico mediante estos conceptos:\n\n**Componentes básicos**: Una computadora está compuesta principalmente por tres partes esenciales: el hardware, el software y los datos.",
          "style": [
            {"text": "procesar información", "fontWeight": "w700"},
            {"text": "hardware, el software y los datos", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Componentes básicos: Software, Hardware y Datos",
          "content": "Una computadora está compuesta por tres elementos esenciales:\n\n**Hardware**: El conjunto de componentes físicos y tangibles, como el procesador, la memoria RAM, el disco duro, el teclado y el monitor.\n**Software**: El conjunto de instrucciones, programas y datos que permiten la funcionalidad de una computadora, como sistemas operativos, navegadores web y aplicaciones.\n**Datos**: Información que la computadora procesa, almacena y maneja, como números, texto, imágenes o sonidos, representada en código binario.",
          "notes": [
            {
              "title": "Hardware",
              "content": "Ejemplos: Procesador (CPU), Memoria RAM, Disco duro o SSD, Teclado y ratón, Monitor, Impresora, Tarjeta de video.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "computer"
            },
            {
              "title": "Software",
              "content": "Ejemplos: Sistemas operativos (Windows, macOS, Linux), Navegadores web (Google Chrome, Mozilla Firefox), Procesadores de texto (Microsoft Word), Aplicaciones móviles (WhatsApp, Spotify), Antivirus (Windows Defender, Avast Antivirus).",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "apps"
            },
            {
              "title": "Datos",
              "content": "Los datos son información que la computadora procesa, representada como secuencias de unos y ceros (código binario). Ejemplos: Números, texto, imágenes, sonidos, videos.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "data_usage"
            },
            {
              "title": "Ejemplo de interacción",
              "content": "Cuando escribes en un procesador de texto, el teclado (hardware) envía datos al software, que los muestra en el monitor (hardware).",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "computer"
            }
          ],
          "style": [
            {"text": "tres elementos esenciales", "fontWeight": "w700"},
            {"text": "representada en código binario", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Dispositivos de entrada, salida o almacenamiento",
          "content": "Para entender cómo interactúan los elementos de hardware con la información, los clasificamos en:\n\n**Dispositivos de entrada**: Permiten introducir datos o comandos (teclado, ratón, micrófono, cámara web, escáner).\n**Dispositivos de salida**: Muestran los resultados del procesamiento (monitor, bocinas, impresora).\n**Dispositivos de almacenamiento**: Guardan información temporal o permanentemente (disco duro, memoria USB, tarjetas SD, CD/DVD, memoria RAM).",
          "notes": [
            {
              "title": "Ejemplos de dispositivos",
              "content": "• Entrada: Teclado (ingresa texto), Mouse (controla el puntero), Micrófono (capta sonido), Cámara web (capta imágenes), Escáner (digitaliza documentos).\n• Salida: Monitor (muestra imágenes y texto), Bocinas o audífonos (reproducen sonido), Impresora (copia física).\n• Almacenamiento: Disco duro (HDD o SSD), Memoria USB, Tarjetas SD, CD/DVD, Memoria RAM (temporal).",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "devices"
            }
          ],
          "style": [
            {"text": "interactúan los elementos de hardware", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Sistemas operativos y su relación con el software",
          "content": "Un **sistema operativo** es el software que gestiona los recursos de una computadora, permite la ejecución de programas y facilita la interacción entre el usuario y el hardware. Sin un sistema operativo, una computadora no podría funcionar de forma práctica, ya que actúa como intermediario entre los programas y el hardware.\n\n**Funciones clave**:\n• Administra la memoria, asignándola a programas.\n• Gestiona procesos para evitar interferencias.\n• Controla dispositivos de entrada y salida.\n• Maneja archivos y almacenamiento.\n• Proporciona una interfaz (gráfica o de comandos).\n\nLos sistemas operativos permiten ejecutar software de aplicación, como navegadores o videojuegos, accediendo al hardware de manera eficiente.",
          "notes": [
            {
              "title": "Nota",
              "content": "La evolución del hardware y el software ha permitido sistemas operativos más eficientes, aprovechando al máximo los recursos físicos.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "trending_up"
            },
            {
              "title": "Ejemplo",
              "content": "Windows permite abrir un navegador web, que usa la CPU y la memoria RAM para mostrar páginas, todo gestionado por el sistema operativo.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "settings"
            }
          ],
          "style": [
            {"text": "gestiona los recursos de una computadora", "fontWeight": "w700"},
            {"text": "intermediario entre los programas y el hardware", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Representación de la información: Qué son los bits y bytes",
          "content": "Las computadoras representan la información mediante **bits** y **bytes** en el sistema binario:\n\n**Bit**: La unidad más pequeña, con valor 0 o 1, que representa estados eléctricos (apagado/encendido).\n**Byte**: Un grupo de 8 bits, capaz de representar 256 valores (por ejemplo, un carácter como 'A').\n\nLos bytes se agrupan en kilobytes (1,024 bytes), megabytes (1,024 KB), gigabytes (1,024 MB), etc., para manejar grandes cantidades de datos.",
          "notes": [
            {
              "title": "Definiciones",
              "content": "• Bit: Unidad más pequeña, valor 0 o 1.\n• Byte: 8 bits, representa un carácter (ej., 'A' = 01000001).\n• Escala: 1 KB = 1,024 bytes, 1 MB = 1,024 KB, 1 GB = 1,024 MB.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "code"
            },
            {
              "title": "Ejemplo",
              "content": "La letra 'A' en código ASCII se representa como 01000001 (1 byte).",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "text_fields"
            }
          ],
          "style": [
            {"text": "representan la información", "fontWeight": "w700"},
            {"text": "sistema binario", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Representación básica de datos como números, texto e imágenes",
          "content": "Toda la información en una computadora se codifica en bits y bytes. Los tipos de datos más comunes son:\n\n**Números**:\n• Enteros: Representados en binario (ej., 255 = 11111111 con 8 bits).\n• Decimales: Usan formato de punto flotante.\n• Negativos: Emplean métodos como el complemento a dos.\n\n**Texto**:\n• Codificado con estándares como ASCII (8 bits por carácter) o Unicode (soporta más símbolos, como emojis).\n• Ejemplo: 'Hola' se convierte en una secuencia binaria.\n\n**Imágenes**:\n• Compuestas por píxeles, cada uno codificado en formato RGB (Rojo, Verde, Azul).\n• Ejemplo: Un píxel rojo puro es (255, 0, 0) en RGB.\n\nEsta codificación permite almacenar, procesar y transmitir datos con precisión.",
          "notes": [
            {
              "title": "Codificación de datos",
              "content": "• Números: Enteros (0 al 255 con 8 bits), Decimales (punto flotante), Negativos (complemento a dos).\n• Texto: ASCII ('A' = 01000001), Unicode (letras, emojis).\n• Imágenes: Píxeles en RGB (ej., rojo = 255, 0, 0).",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "image"
            },
            {
              "title": "Nota",
              "content": "La codificación adecuada asegura que los datos sean interpretados correctamente por el software.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "check_circle"
            }
          ],
          "style": [
            {"text": "codifica en bits y bytes", "fontWeight": "w700"},
            {"text": "almacenar, procesar y transmitir datos", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Proceso básico de funcionamiento",
          "content": "El funcionamiento de una computadora sigue un ciclo básico:\n\n**Entrada**: Recibe información de dispositivos como teclados o ratones.\n**Procesamiento**: La CPU interpreta y ejecuta instrucciones, manipulando datos.\n**Almacenamiento**: Guarda datos temporalmente en la memoria RAM o permanentemente en discos duros.\n**Salida**: Muestra resultados en monitores, impresoras o altavoces.\n\nEste ciclo permite a las computadoras realizar tareas desde abrir aplicaciones hasta procesar imágenes.",
          "notes": [
            {
              "title": "Ciclo de funcionamiento",
              "content": "• Entrada: Teclado, ratón.\n• Procesamiento: CPU ejecuta instrucciones.\n• Almacenamiento: RAM (temporal), Disco duro (permanente).\n• Salida: Monitor, impresora, altavoces.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "loop"
            },
            {
              "title": "Ejemplo",
              "content": "Cuando escribes un texto, el teclado envía datos a la CPU, que los procesa y los muestra en el monitor.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "computer"
            }
          ],
          "style": [
            {"text": "ciclo básico", "fontWeight": "w700"},
            {"text": "realizar tareas", "fontWeight": "w700"}
          ]
        },
        {
          "title": "¿Qué es un lenguaje de programación?",
          "content": "“Un lenguaje de programación es un conjunto de reglas y símbolos que permiten a los desarrolladores escribir instrucciones comprensibles para una computadora con el fin de ejecutar tareas específicas.”\n\nUn lenguaje de programación es una herramienta esencial que permite a los programadores comunicarse con las computadoras para ejecutar instrucciones y resolver problemas. Tal como lo mencionan expertos como Brian Kernighan y Bjarne Stroustrup, los lenguajes de programación no solo permiten escribir instrucciones que la computadora entiende, sino que también facilitan la expresión de soluciones eficientes a problemas complejos.\n\nDado que la programación es un proceso que requiere pensamiento lógico, el uso de un lenguaje de programación adecuado facilita la descomposición de problemas en pasos más simples y la identificación de patrones para tomar decisiones informadas.",
          "style": [
            {"text": "“Un lenguaje de programación es un conjunto de reglas y símbolos...", "fontSize": 16, "fontWeight": "w500", "fontStyle": "italic"},
            {"text": "Brian Kernighan y Bjarne Stroustrup", "fontWeight": "w700"},
            {"text": "pensamiento lógico", "fontWeight": "w700"}
          ],
          "notes": [
            {
              "title": "Nota",
              "content": "Los lenguajes de programación son puentes entre las ideas humanas y las capacidades de las computadoras.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ]
        },
        {
          "title": "Clasificación de los lenguajes de programación",
          "content": "Existen diferentes formas de clasificar los lenguajes de programación, y cada una tiene un impacto significativo en cómo los programadores abordan la resolución de problemas. La clasificación según su **nivel de abstracción** y los **paradigmas** que siguen es un aspecto relevante, ya que cada tipo de lenguaje tiene ventajas que pueden ser aprovechadas dependiendo del problema a resolver.",
          "style": [
            {"text": "nivel de abstracción", "fontWeight": "w700"},
            {"text": "paradigmas", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Según su nivel de abstracción",
          "content": "El nivel de abstracción se refiere a cuánto oculta un lenguaje los detalles del hardware:\n\n**Lenguajes de alto nivel** (Python, Java): Cercanos al lenguaje humano, diseñados para centrarse en la lógica del problema sin preocuparse por detalles técnicos del hardware.\n**Lenguajes de bajo nivel** (C, Ensamblador): Cercanos al lenguaje máquina, ofrecen control detallado del hardware, ideales para optimización de recursos o ejecución eficiente.",
          "notes": [
            {
              "title": "Comparación",
              "content": "• Alto nivel: Más fáciles de aprender, portátiles (Python, Java).\n• Bajo nivel: Más complejos, optimizados para hardware específico (C, Ensamblador).",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "compare_arrows"
            }
          ],
          "style": [
            {"text": "nivel de abstracción", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Según su paradigma",
          "content": "Los paradigmas son estilos de programación que determinan cómo se organiza el código:\n\n**Imperativo**: Instrucciones paso a paso (C, Pascal).\n**Orientado a objetos (POO)**: Organiza el código en objetos con características y acciones (Java, Python).\n**Funcional**: Basado en funciones que procesan datos sin modificarlos (Haskell, Scala).\n**Lógico**: Usa reglas lógicas para deducir soluciones (Prolog).\n**Declarativo**: Describe el resultado deseado sin especificar cómo lograrlo (SQL).\n**Multiparadigma**: Combina varios estilos (Python, C++).\n\nCada paradigma ofrece ventajas según el tipo de problema.",
          "notes": [
            {
              "title": "Ejemplos de paradigmas",
              "content": "• Imperativo: Suma paso a paso en C.\n• POO: Objeto 'Coche' con color y acción 'acelerar' en Java.\n• Funcional: Función de suma en Haskell.\n• Lógico: Deducción de relaciones en Prolog.\n• Declarativo: Consulta de datos en SQL.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "code"
            },
            {
              "title": "Nota",
              "content": "Conocer los paradigmas permite elegir el enfoque más adecuado para cada proyecto.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ],
          "style": [
            {"text": "paradigmas", "fontWeight": "w700"},
            {"text": "ventajas según el tipo de problema", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Diferencia entre compilador e intérprete",
          "content": "Las computadoras no entienden directamente lenguajes de alto nivel, por lo que se usan **compiladores** o **intérpretes** para traducir el código:\n\n**Compilador**: Traduce todo el programa a lenguaje máquina antes de ejecutarlo, generando un archivo ejecutable (C, Java).\n**Intérprete**: Ejecuta el código línea por línea sin compilación previa (Python, JavaScript).\n\nAmbos convierten el código en instrucciones que la computadora entiende, pero difieren en velocidad y flexibilidad.",
          "notes": [
            {
              "title": "Compilador vs. Intérprete",
              "content": "• Compilador: Más rápido en ejecución, detecta errores antes (C, Java).\n• Intérprete: Más flexible, ideal para pruebas rápidas (Python, JavaScript).",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "code"
            },
            {
              "title": "Ventajas y desventajas",
              "content": "• Compilador: Rápido pero requiere recompilación tras cambios.\n• Intérprete: Lento pero permite cambios inmediatos.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "compare_arrows"
            }
          ],
          "style": [
            {"text": "traducir el código", "fontWeight": "w700"},
            {"text": "velocidad y flexibilidad", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Tipos de datos",
          "content": "Los **tipos de datos** indican qué clase de información puede almacenar una variable y qué operaciones se pueden realizar con ella. Se dividen en:\n\n**Primitivos**:\n• Enteros (int): Números sin decimales (10, -5).\n• Decimales (float, double): Números con parte fraccionaria (3.14, -0.5).\n• Booleanos (bool): Verdadero o falso.\n• Caracteres (char): Símbolos individuales ('A', '3').\n\n**No primitivos**:\n• Cadenas (string): Secuencias de caracteres (\"Hola mundo\").\n• Arreglos (arrays): Colecciones de datos del mismo tipo ([1, 2, 3]).\n• Estructuras (struct): Agrupan datos variados.",
          "notes": [
            {
              "title": "Ejemplos de tipos de datos",
              "content": "• Primitivos: int (10), float (3.14), bool (true), char ('A').\n• No primitivos: string (\"Hola\"), array ([1, 2, 3]), struct (objeto con nombre y edad).",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "data_object"
            },
            {
              "title": "Nota",
              "content": "Elegir el tipo de datos correcto optimiza el uso de memoria y el rendimiento del programa.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ],
          "style": [
            {"text": "tipos de datos", "fontWeight": "w700"},
            {"text": "almacenar una variable", "fontWeight": "w700"}
          ]
        }
      ]
    },
    "section_2": {
      "title": "II. Pensamiento lógico y resolución de problemas",
      "sectionImage": "https://media.istockphoto.com/id/602325398/es/foto/decodificaci%C3%B3n-y-comprensi%C3%B3n-del-problema-concepto-de-explicaci%C3%B3n-cara-a-cara.jpg?s=1024x1024&w=is&k=20&c=NsSI10IUzV988NwB_ATnU1LAUSekK6gGreLUfXPxDHI=",
      "welcomeText": "¡Empecemos un nuevo subtema!\nAntes de escribir código, es fundamental desarrollar una habilidad clave en la programación: el pensamiento lógico. Esta capacidad te permitirá analizar situaciones, identificar patrones y tomar decisiones estructuradas para resolver problemas de manera eficiente.\n\nEn este subtema, exploraremos cómo el pensamiento lógico no solo es esencial en la programación, sino también en la vida cotidiana. A medida que avances, descubrirás cómo aplicar este tipo de razonamiento para descomponer problemas complejos en pasos simples, una habilidad que te será útil en cualquier disciplina.\n\n¡Es hora de entrenar tu mente como un verdadero programador!",
      "subsections": [
        {
          "title": "¿Qué es el pensamiento lógico?",
          "content": "“El pensamiento lógico es la capacidad de analizar, organizar y estructurar información de manera coherente, lo que facilita la identificación de relaciones y la resolución eficiente de problemas.”\n\nEn la programación, el pensamiento lógico es una habilidad fundamental que permite a los desarrolladores analizar problemas, descomponerlos en pasos más simples e identificar patrones para encontrar soluciones efectivas. Gracias a esta forma de razonamiento, es posible tomar decisiones informadas sobre el mejor enfoque para resolver un problema.\n\nUn aspecto esencial del pensamiento lógico es el proceso de resolución de problemas, que nos permite abordar los retos de manera sistemática y directa. Este proceso no solo es crucial en la programación, sino que también es aplicable a muchas situaciones cotidianas, ya que ayuda a encontrar soluciones claras y eficientes a los desafíos que enfrentamos. Al aplicar un enfoque estructurado para descomponer un problema, podemos simplificar tareas complejas, evitar errores y tomar decisiones más informadas.",
          "style": [
            {"text": "“El pensamiento lógico es la capacidad de analizar, organizar y estructurar información...", "fontSize": 16, "fontWeight": "w500", "fontStyle": "italic"},
            {"text": "pensamiento lógico", "fontWeight": "w700"},
            {"text": "resolución de problemas", "fontWeight": "w700"}
          ],
          "notes": [
            {
              "title": "Proceso de resolución de problemas",
              "content": "• Entender el Problema: Analizar todos los aspectos para tener una visión completa.\n• Descomposición: Dividir el problema en partes más pequeñas y manejables.\n• Búsqueda de Soluciones: Explorar enfoques y estrategias posibles.\n• Implementación: Aplicar la solución seleccionada.\n• Evaluación y Ajustes: Verificar si la solución funciona y ajustarla si es necesario.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "list"
            },
            {
              "title": "Nota",
              "content": "Este proceso de resolución de problemas es clave para ser más efectivos en la toma de decisiones y en la creación de soluciones claras y viables.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ]
        },
        {
          "title": "Descomposición de problemas en pasos simples",
          "content": "Una de las estrategias más poderosas en la resolución de problemas es la descomposición, que consiste en dividir un problema complejo en partes más pequeñas y manejables. Este enfoque facilita la comprensión del problema y permite encontrar soluciones más fácilmente. La descomposición no siempre implica tratar cada subproblema de manera independiente, sino reducir la complejidad general dividiendo las tareas en unidades más simples. Es una técnica que recuerda al principio de \"divide y vencerás\", utilizado tanto en programación como en otros campos, para resolver problemas de forma ordenada y eficiente.\n\nAmbas buscan descomponer un problema en partes más pequeñas, pero en \"divide y vencerás\" el problema se divide en subproblemas más fáciles de resolver, los cuales se resuelven de manera independiente y luego se combinan las soluciones para obtener la solución final. En este sentido, ambas técnicas comparten el objetivo de hacer que el problema sea más fácil de resolver al descomponerlo en elementos más simples.\n\nLa descomposición es una técnica que no solo se utiliza dentro de la programación, sino que también es esencial en la vida diaria. Permite abordar problemas de manera efectiva y organizada, reduciendo la carga cognitiva y mejorando el enfoque al momento de resolverlos. De este modo, aumenta la probabilidad de éxito en la resolución del problema.",
          "examples": [
            {
              "title": "Ejemplo: Organizar una fiesta",
              "problem": "Imagina que tienes que organizar una fiesta. El problema general es organizar la fiesta, pero lo puedes descomponer en tareas más pequeñas:",
              "logic": "• Elegir el lugar de la fiesta.\n• Definir el tema o tipo de fiesta.\n• Hacer una lista de invitados.\n• Comprar comida y bebida.\n• Decorar el lugar.\n• Preparar juegos o actividades.",
              "explanation": "Cada una de estas tareas también se puede dividir en subtareas más pequeñas. Por ejemplo, \"Comprar comida y bebida\" se puede descomponer en:\n• Hacer una lista de alimentos.\n• Investigar precios en tiendas cercanas.\n• Hacer las compras en el supermercado."
            }
          ],
          "style": [
            {"text": "descomposición", "fontWeight": "w700"},
            {"text": "\"divide y vencerás\"", "fontWeight": "w700", "fontStyle": "italic"}
          ],
          "notes": [
            {
              "title": "Nota",
              "content": "La descomposición reduce la complejidad y mejora el enfoque, tanto en programación como en la vida diaria.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ]
        },
        {
          "title": "Identificación de patrones y toma de decisiones",
          "content": "Antes de profundizar en la toma de decisiones, es necesario entender qué son los patrones. Los patrones son secuencias que se repiten de manera regular o predecible en un conjunto de datos o situaciones específicas. Al programar o resolver un problema, identificar estos patrones ayuda a prever lo que podría ocurrir después de un período de tiempo determinado, lo que permite tomar decisiones informadas.\n\nAl reconocer patrones en diferentes contextos, no solo facilitamos la toma de decisiones informadas, sino que también optimizamos procesos, ya sea en la programación, en la vida diaria o incluso en el análisis de datos complejos. Además, los patrones nos permiten prever resultados y aplicar soluciones previamente exitosas a problemas similares.\n\nUna vez que hemos podido identificar un patrón, al momento de resolver un problema podremos tomar decisiones más rápidamente. Tanto la descomposición de problemas como la identificación de patrones son fundamentales para escribir programas eficientes y bien estructurados. Ayudan a los programadores a crear soluciones claras y tomar decisiones fundamentadas en sus enfoques.",
          "examples": [
            {
              "title": "Ejemplo: Patrones numéricos",
              "problem": "Si tienes la secuencia 3, 6, 9, 12, ¿cuál es el siguiente número?",
              "logic": "El patrón es una progresión en la que se suman 3 unidades, por lo que el siguiente número es 15.",
              "explanation": "Reconocer este patrón permite prever el próximo elemento de la secuencia de manera rápida y precisa."
            },
            {
              "title": "Ejemplo: Patrones en decisiones",
              "problem": "Si siempre compras manzanas rojas porque son más dulces que las verdes, ¿qué decisión tomarás en el mercado?",
              "logic": "Identificas un patrón que te ayudará a tomar decisiones más rápidas la próxima vez que vayas al mercado.",
              "explanation": "El patrón de preferencia por manzanas rojas agiliza la decisión de compra."
            }
          ],
          "style": [
            {"text": "patrones", "fontWeight": "w700"},
            {"text": "toma de decisiones", "fontWeight": "w700"},
            {"text": "optimizar procesos", "fontWeight": "w700"}
          ],
          "notes": [
            {
              "title": "Tipos de patrones",
              "content": "• Numéricos: Secuencias como Fibonacci (0, 1, 1, 2, 3, 5, 8, …).\n• Comportamentales: Procesos repetitivos en situaciones cotidianas o programación.\n• Visuales: Repetición de formas o colores en diseño, arte o arquitectura.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "pattern"
            },
            {
              "title": "Nota",
              "content": "La descomposición y la identificación de patrones se complementan para resolver problemas de manera organizada y eficiente.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ]
        }
      ]
    },
    "section_3": {
      "title": "III. Introducción a los diagramas de flujo",
      "sectionImage": "https://media.istockphoto.com/id/1415348384/es/foto/proceso-an%C3%A1lisis-soluci%C3%B3n-estrategia-proceso-flujo-de-trabajo-procedimiento-negocio.jpg?s=1024x1024&w=is&k=20&c=mm7HMOtqC5IkISmIzLf8FrU432c8WBaRxWSDIv3gbY8=",
      "welcomeText": "Es momento de explorar un nuevo tema.\nPrevio a la codificación, es crucial tener herramientas que nos ayuden a estructurar y organizar nuestras ideas de manera visual. Existen diversas técnicas que los desarrolladores utilizan para resolver problemas o tareas específicas, y cada una de ellas es esencial para mejorar la calidad y efectividad de las soluciones.\n\nUna de las herramientas más poderosas y útiles es el diagrama de flujo. Este permite representar procesos de manera clara y estructurada, facilitando la comprensión y la resolución de problemas complejos.\n\n¡Es hora de representar tus ideas de manera visual y comenzar a construir soluciones más claras y efectivas!",
      "subsections": [
        {
          "title": "¿Qué es un diagrama de flujo y para qué sirve?",
          "content": "Un diagrama de flujo es una representación gráfica que describe los pasos de un algoritmo o proceso de manera visual. Utiliza una serie de símbolos estándar conectados por flechas que indican el flujo del proceso, facilitando la comprensión del orden en el que deben ejecutarse las acciones.\n\nEl propósito principal de un diagrama de flujo es hacer que los procesos sean fáciles de entender y seguir. Cada símbolo tiene un significado específico: algunos representan acciones, otras decisiones, entradas, salidas o el inicio y fin de un proceso. Las flechas indican la dirección del flujo, mostrando el orden lógico de las operaciones.\n\nLos diagramas de flujo son herramientas clave para planificar algoritmos antes de escribir el código. Ayudan a los programadores a visualizar de manera clara los pasos y decisiones involucrados, permitiendo detectar errores lógicos de manera temprana y facilitando la comunicación entre diferentes personas al compartir ideas y enfoques.",
          "style": [
            {"text": "Un diagrama de flujo es una representación gráfica...", "fontSize": 16, "fontWeight": "w500"},
            {"text": "símbolos estándar", "fontWeight": "w700"},
            {"text": "planificar algoritmos", "fontWeight": "w700"}
          ],
          "notes": [
            {
              "title": "Importancia",
              "content": "Los diagramas de flujo ayudan a planificar algoritmos, detectar errores lógicos y comunicar ideas de manera efectiva.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ]
        },
        {
          "title": "Características de un diagrama de flujo",
          "content": "Los diagramas de flujo son representaciones gráficas de procesos, y su principal objetivo es mostrar cómo fluye la información o las decisiones a lo largo de un sistema. Cada diagrama sigue un conjunto de características clave que permiten su comprensión y uso efectivo en la programación y resolución de problemas.",
          "notes": [
            {
              "title": "Características clave",
              "content": "• Secuencialidad: Siguen un orden lógico con flechas que guían desde el inicio hasta el final.\n• Claridad en la representación: Simplifican procesos complejos en pasos visuales.\n• Descomposición de procesos: Dividen procesos en pasos manejables.\n• Flexibilidad en su aplicación: Aplicables a programación, gestión de proyectos y más.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "list"
            }
          ],
          "style": [
            {"text": "representaciones gráficas de procesos", "fontWeight": "w700"},
            {"text": "características clave", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Cómo representar procesos con diagramas",
          "content": "Para construir un diagrama de flujo efectivo, es esencial seguir una serie de pasos que nos permitan organizar y representar adecuadamente el algoritmo o proceso que deseamos ilustrar.\n\nAntes de crear un diagrama de flujo, es fundamental definir el objetivo del proceso que se desea representar. Este objetivo debe ser claro y reflejar lo que el algoritmo intenta lograr. Una vez que el objetivo esté establecido, el siguiente paso es desglosar el proceso en una serie de acciones o decisiones individuales, asegurándose de que cada uno de estos pasos esté claramente definido y sin ambigüedades. Cada acción o decisión se representará utilizando un símbolo específico dentro del diagrama.\n\nLuego, es esencial seleccionar los símbolos correctos para representar cada acción o decisión. Los símbolos deben ser los adecuados para asegurar que el diagrama sea fácil de entender y siga los estándares convencionales. Las flechas también juegan un papel clave, ya que indican el flujo del proceso, conectando los símbolos en el orden lógico de ejecución. El flujo del diagrama generalmente comienza con el símbolo de \"Inicio\" y termina en \"Fin\", pasando por las diversas acciones y decisiones intermedias.\n\nUna vez que el diagrama esté completo, es importante realizar una revisión para asegurar que el flujo sea lógico y que no falte ningún paso crucial. También se debe verificar que todas las acciones y decisiones estén correctamente conectadas para evitar confusiones o errores en el proceso representado.",
          "notes": [
            {
              "title": "Pasos para construir un diagrama de flujo",
              "content": "• Identificar el objetivo del algoritmo.\n• Desglosar el proceso en pasos simples.\n• Seleccionar los símbolos apropiados.\n• Conectar los símbolos con flechas.\n• Verificar el flujo del diagrama.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "list"
            }
          ],
          "style": [
            {"text": "construir un diagrama de flujo efectivo", "fontWeight": "w700"},
            {"text": "símbolos correctos", "fontWeight": "w700"}
          ],
          "examples": [
            {
              "title": "Ejemplo: Algoritmo para sumar dos números",
              "problem": "Representar un algoritmo que sume dos números introducidos por el usuario.",
              "logic": "• Inicio\n• Leer el primer número (Entrada)\n• Leer el segundo número (Entrada)\n• Sumar los dos números (Proceso)\n• Mostrar el resultado (Salida)\n• Fin",
              "explanation": "El diagrama usa óvalos para Inicio/Fin, paralelogramos para entradas/salida, y un rectángulo para el proceso de suma.",
              "image": "assets/module1photos/Sumar.png"
            },
            {
              "title": "Ejemplo: Algoritmo para determinar si una persona es mayor de edad",
              "problem": "Determinar si una persona es mayor o menor de edad según su edad introducida por el usuario.",
              "logic": "• Inicio\n• Leer la edad de la persona (Entrada)\n• Evaluar si la edad es mayor o igual a 18 (Decisión)\n• Si es mayor o igual a 18, mostrar “Es mayor de edad” (Salida)\n• Si no, mostrar “Es menor de edad” (Salida)\n• Fin",
              "explanation": "El diagrama usa óvalos para Inicio/Fin, un paralelogramo para la entrada, un rombo para la decisión, y paralelogramos para las salidas.",
              "image": "assets/module1photos/PersonaMayor.png"
            }
          ]
        }
      ]
    },
    "section_4": {
      "title": "IV. Conceptos y símbolos clave en diagramas de flujo",
      "sectionImage": "https://media.istockphoto.com/id/610566912/es/foto/diagrama-de-flujo-diagrama.jpg?s=1024x1024&w=is&k=20&c=vhTnaiiXo68PaL8mzgreog-oMN7zUWdHFHqoUlIBRTc=",
      "welcomeText": "¡Vamos a sumergirnos en este tema!\nEn los diagramas de flujo, los procesos se representan mediante símbolos gráficos que muestran la secuencia lógica de un algoritmo. Usando símbolos estandarizados y flechas, estos diagramas conectan las acciones y decisiones, ofreciéndote una forma clara de visualizar los pasos necesarios para resolver un problema de manera eficiente.\n\nEn esta sección, vamos a descubrir los elementos básicos de los diagramas de flujo, cómo construir uno y por qué son tan útiles en la programación. Los diagramas de flujo son herramientas esenciales que todo programador aprende a utilizar, ya que nos ayudan a estructurar ideas de manera lógica, una habilidad clave en el desarrollo de software.\n\n¿Listo para conocer qué componentes tienen?",
      "subsections": [
        {
          "title": "Símbolos básicos y su significado",
          "content": "Como se mencionó anteriormente, los diagramas de flujo utilizan símbolos estandarizados que permiten representar de manera clara y estructurada los diferentes pasos y decisiones dentro de un proceso. Cada uno de estos símbolos juega un papel crucial en la claridad y eficacia de un diagrama de flujo.",
          "notes": [
            {
              "title": "Símbolos estandarizados",
              "content": "• Óvalo (Inicio/Fin): Indica el inicio y el final del proceso.\n• Rectángulo (Proceso): Representa una operación o acción dentro del algoritmo.\n• Rombo (Decisión/Pregunta): Muestra una decisión que debe tomarse en función de una condición.\n• Paralelogramo (Entrada/Salida): Indica que el programa está pidiendo datos (entrada) o mostrando resultados (salida).\n• Flechas (Conectores): Muestran el flujo del proceso, indicando la secuencia de ejecución.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "list"
            }
          ],
          "style": [
            {"text": "símbolos estandarizados", "fontWeight": "w700"},
            {"text": "claridad y eficacia", "fontWeight": "w700"}
          ],
          "image": "assets/module1photos/SIMBOLO.png"
        },
        {
          "title": "Conceptos clave en diagramas de flujo",
          "content": "Ahora que conocemos los símbolos básicos, es fundamental entender cómo cada uno de estos elementos contribuye a la representación de un algoritmo.",
          "notes": [
            {
              "title": "Conceptos fundamentales",
              "content": "• Inicio y Fin: Define el ciclo completo del algoritmo, marcando el comienzo y el final.\n• Entrada y Salida de Datos: Indica la interacción con datos externos, como leer información o mostrar resultados.\n• Flujo de Ejecución: Secuencia lógica de pasos, guiada por flechas para asegurar el orden correcto.\n• Acciones o Procesos: Operaciones como cálculos o asignaciones de valores.\n• Decisiones y Condiciones: Puntos de ramificación basados en evaluaciones lógicas, esenciales para modelar decisiones.",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "list"
            }
          ],
          "style": [
            {"text": "conceptos clave", "fontWeight": "w700"},
            {"text": "representación de un algoritmo", "fontWeight": "w700"}
          ]
        },
        {
          "title": "Tipos de operadores",
          "content": "Los diagramas de flujo pueden incluir operadores para realizar diversas operaciones:\n\n• Operadores Aritméticos: Son los utilizados para realizar operaciones matemáticas, como suma (+), resta (-), multiplicación (*) y división (/).\n• Operadores Lógicos: Utilizados para hacer evaluaciones lógicas, como AND, OR y NOT.\n• Operadores Relacionales: Comparan dos valores, como \"mayor que\", \"igual a\", \"menor que\", etc., y son utilizados en las decisiones del diagrama.\n\nLos diagramas de flujo deben ser sencillos y fáciles de seguir, evitando la complejidad innecesaria para mantener su propósito claro. Es importante usar ciclos con cuidado y asegurarse de que las flechas y condiciones estén correctamente etiquetadas para evitar confusiones.",
          "notes": [
            {
              "title": "Tipos de operadores",
              "content": "• Aritméticos: Suma (+), resta (-), multiplicación (*), división (/).\n• Lógicos: AND, OR, NOT para evaluaciones lógicas.\n• Relacionales: Mayor que (>), igual a (==), menor que (<).",
              "color": "#1E40AF",
              "opacity": 0.3,
              "icon": "code"
            },
            {
              "title": "Nota",
              "content": "Los operadores enriquecen la lógica del diagrama, permitiendo cálculos y decisiones complejas.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "lightbulb"
            }
          ],
          "style": [
            {"text": "operadores", "fontWeight": "w700"},
            {"text": "sencillos y fáciles de seguir", "fontWeight": "w700"}
          ],
          "examples": [
            {
              "title": "Ejemplo: Algoritmo para determinar si un número es divisible entre 3 y 5",
              "problem": "Diseñar un algoritmo que determine si un número introducido por el usuario es divisible tanto entre 3 como entre 5.",
              "logic": "• Inicio\n• Leer un número (Entrada)\n• Calcular si el número es divisible entre 3 (Proceso: número % 3 == 0)\n• Calcular si el número es divisible entre 5 (Proceso: número % 5 == 0)\n• Evaluar si ambas condiciones son verdaderas (Decisión lógica: condición1 AND condición2)\n• Si es verdadero, mostrar “El número es divisible entre 3 y 5” (Salida)\n• Si no, mostrar “El número NO es divisible entre 3 y 5” (Salida)\n• Fin",
              "explanation": "El diagrama usa óvalos para Inicio/Fin, un paralelogramo para la entrada, rectángulos para los procesos de cálculo, un rombo para la decisión lógica, y paralelogramos para las salidas.",
              "image": "assets/module1photos/Divisible3y5.png"
            }
          ]
        },
        {
          "title": "Salida de resultados",
          "content": "En diagramas complejos, se pueden usar subprocesos para dividir el flujo en partes más pequeñas y mejorar su legibilidad. Como se mencionó, el paralelogramo también se utiliza para representar la salida de resultados, es decir, los valores que el algoritmo produce y muestra al usuario o sistema.",
          "notes": [
            {
              "title": "Importancia de la salida",
              "content": "La salida de resultados permite al usuario verificar la funcionalidad del algoritmo.",
              "color": "#10B981",
              "opacity": 0.3,
              "icon": "visibility"
            }
          ],
          "style": [
            {"text": "salida de resultados", "fontWeight": "w700"},
            {"text": "mejorar su legibilidad", "fontWeight": "w700"}
          ]
        }
      ],
      "finalNote": {
        "title": "Conclusión",
        "content": "En este módulo, hemos explorado los fundamentos esenciales de la programación, comenzando con la comprensión de conceptos clave que son fundamentales antes de escribir código. A través de la descomposición de problemas y la identificación de patrones, los estudiantes han aprendido cómo abordar los desafíos de manera lógica y estructurada. Hemos estudiado cómo los algoritmos son herramientas poderosas para resolver problemas de forma eficiente, y cómo los diagramas de flujo, como representaciones gráficas de algoritmos, facilitan la visualización y el entendimiento de los pasos necesarios para lograr una solución.",
        "color": "#1E40AF",
        "opacity": 0.3,
        "icon": "lightbulb"
      }
    }
  },
  "activities": [
    {
      "subtopic": "Conceptos clave antes de escribir código",
      "objective": "Ayudar a los estudiantes a comprender los términos clave como software, hardware, compilación y lenguaje de programación, relacionándolos correctamente con sus definiciones.",
      "theory": {
        "questions": [
          {
            "question": "¿Qué diferencia hay entre software y hardware?",
            "options": [
              "El software es el conjunto de piezas físicas de la computadora, y el hardware es el conjunto de programas.",
              "El software se refiere a los programas y aplicaciones, y el hardware a los componentes físicos.",
              "El software y el hardware son lo mismo, no hay diferencia.",
              "Ninguna de las anteriores."
            ],
            "correctAnswer": 1
          },
          {
            "question": "¿Cuál de las siguientes afirmaciones sobre los lenguajes de programación es correcta?",
            "options": [
              "Los lenguajes de bajo nivel son más fáciles de entender para los humanos.",
              "Los lenguajes de alto nivel están diseñados para ser más comprensibles y manejables.",
              "No existe diferencia entre lenguajes de bajo y alto nivel.",
              "Los lenguajes de programación solo pueden ejecutarse en un tipo de computadora."
            ],
            "correctAnswer": 1
          }
        ]
      },
      "reflection": "¿Cómo puede el entendimiento de la relación entre software y hardware mejorar tu capacidad para desarrollar aplicaciones eficientes?",
      "practice": {
        "question": "Clasifica los siguientes elementos en Software o Hardware.",
        "elements": [
          "Teclado",
          "Monitor",
          "Procesador",
          "Memoria RAM",
          "Impresora",
          "Tarjeta de video",
          "Windows",
          "Antivirus",
          "Navegador web",
          "Sistema operativo"
        ],
        "answers": {
          "Hardware": [
            "Teclado",
            "Monitor",
            "Procesador",
            "Memoria RAM",
            "Impresora",
            "Tarjeta de video"
          ],
          "Software": [
            "Windows",
            "Antivirus",
            "Navegador web",
            "Sistema operativo"
          ]
        }
      }
    },
    {
      "subtopic": "Pensamiento lógico y resolución de problemas",
      "objective": "Desarrollar la habilidad de dividir problemas complejos en pasos más simples y comprensibles, facilitando su resolución mediante algoritmos estructurados.",
      "theory": {
        "questions": [
          {
            "question": "¿Cuál es la principal ventaja de descomponer un problema en pasos simples?",
            "options": [
              "Hace que el problema se resuelva solo.",
              "Permite analizar y resolver cada parte de manera estructurada.",
              "No tiene ventajas, solo complica el proceso.",
              "Solo es útil en problemas matemáticos."
            ],
            "correctAnswer": 1
          },
          {
            "question": "¿Cuál de las siguientes situaciones representa una correcta descomposición de un problema?",
            "options": [
              "Dividir la tarea de hacer un pastel en pasos como: conseguir ingredientes, mezclar, hornear y decorar.",
              "Escribir todo el código de un programa sin planificarlo previamente.",
              "Resolver un problema sin organizar los pasos.",
              "Buscar una solución sin considerar cada parte del problema."
            ],
            "correctAnswer": 0
          }
        ]
      },
      "reflection": "Piensa en una actividad cotidiana, como hacer una llamada telefónica o preparar café. ¿Cómo podrías dividir esta tarea en pasos más pequeños para que otra persona la siga sin problemas?",
      "practice": {
        "question": "Elige uno de los siguientes problemas cotidianos y divídelo en 7 pasos simples en el orden correcto.",
        "options": [
          "Hacer una reserva en un restaurante",
          "Enviar un paquete por correo",
          "Registrarse en una plataforma en línea"
        ],
        "examples": {
          "Hacer una reserva en un restaurante": [
            "Elegir el restaurante.",
            "Verificar disponibilidad de mesas.",
            "Contactar al restaurante.",
            "Proporcionar información necesaria.",
            "Confirmar detalles de la reserva.",
            "Guardar la confirmación.",
            "Asistir al restaurante."
          ]
        }
      }
    },
    {
      "subtopic": "Introducción a los diagramas de flujo",
      "objective": "Comprender qué es un diagrama de flujo, sus símbolos básicos y cómo se representan procesos mediante el uso de operadores aritméticos, lógicos y relacionales.",
      "theory": {
        "questions": [
          {
            "question": "¿Cuál es la principal función de un diagrama de flujo?",
            "options": [
              "Representar visualmente la estructura de una base de datos.",
              "Crear gráficos para presentaciones.",
              "Representar la secuencia lógica de un proceso o algoritmo.",
              "Sustituir la necesidad de programar."
            ],
            "correctAnswer": 2
          }
        ]
      },
      "reflection": "¿Por qué crees que los diagramas de flujo son útiles antes de escribir código?",
      "practice": {
        "question": "Crea un diagrama de flujo para sumar dos números y evaluar el resultado.",
        "steps": [
          "Inicio",
          "Solicitar dos números al usuario",
          "Sumar ambos números",
          "Si el resultado es mayor a 10, mostrar 'El resultado es alto'",
          "Si el resultado es menor o igual a 10, mostrar 'El resultado es bajo'",
          "Fin"
        ]
      }
    },
    {
      "subtopic": "Conceptos clave en diagramas de flujo",
      "objective": "Aplicar los conceptos de entrada, proceso, decisión y salida en la creación de diagramas de flujo para resolver problemas sencillos.",
      "theory": {
        "questions": [
          {
            "question": "¿Cuál símbolo representa una decisión en un diagrama de flujo?",
            "options": [
              "Rectángulo",
              "Rombo",
              "Óvalo",
              "Flecha"
            ],
            "correctAnswer": 1
          }
        ]
      },
      "reflection": "Describe la importancia de las decisiones (condicionales) en la creación de algoritmos.",
      "practice": {
        "question": "Crea un diagrama de flujo para determinar si un estudiante aprueba o reprueba un curso.",
        "steps": [
          "Inicio",
          "Solicitar calificación del estudiante",
          "Si la calificación es mayor o igual a 70, mostrar 'Estudiante aprobado'",
          "Si la calificación es menor a 70, mostrar 'Estudiante reprobado'",
          "Fin"
        ]
      }
    }
  ],
  "activity_descriptions": [
    "Fundamentos de lenguajes de programación",
    "Diferencias entre software y hardware",
    "Pensamiento algorítmico y resolución de problemas",
    "Creación y comprensión de diagramas de flujo",
    "Elementos avanzados de diagramas de flujo"
  ],
  "activity_completion_message": "Progreso guardado exitosamente",
  "login_required_message": "Inicia sesión para guardar tu progreso",
  "user_not_found_message": "Usuario no registrado en el sistema"
}